SanJoaquin_cond_daily_new <- cdec_query(station = "VER", sensor_num = "100",
dur_code = "D", start_date = as.character(start_date),
end_date = as.character(end_date))
SanJoaquin_cond_monthly_average<-mean(SanJoaquin_cond_daily_new$parameter_value, na.rm = T)
SanJoaquin_cond_monthly_average
#### ppm conversion
SanJoa_ppm<-(SanJoaquin_cond_monthly_average*0.55)
SanJoa_ppm
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
Banks_cond_daily_new <- cdec_query(station = "HBP", sensor_num = "100",
dur_code = "D", start_date = as.character(start_date),
end_date = as.character(end_date))
#need to take the average of all parameter_value for the date
Banks_cond_monthly_average<-mean(Banks_cond_daily_new$parameter_value, na.rm = T)
Banks_cond_monthly_average
#convert um/cm to ppm
#idea to have some historical context with the salinity?
#### ppm conversion
Banks_ppm<-(Banks_cond_monthly_average*0.55)
Banks_ppm
# URL of the PDF file
delta_exports_pdf_url <- "https://www.usbr.gov/mp/cvo/vungvari/doutdly.pdf"
# Path to save the downloaded PDF file
delta_exports_pdf_file <- "historical_data/delta_exports.pdf"
# Download the PDF file
download.file(delta_exports_pdf_url, delta_exports_pdf_file, mode = "wb")
# Extract text from the PDF file
delta_exports_pdf_text <- pdf_text(delta_exports_pdf_file)
# Extract the last page's text, where the "Average" row appears
delta_export_last_page_text <- delta_exports_pdf_text[length(delta_exports_pdf_text)]
# Split the text into lines
delta_export_lines <- str_split(delta_export_last_page_text, "\n")[[1]]
# Find the line containing the "Average" row
delta_export_average_line <- delta_export_lines[str_detect(delta_export_lines, "Average")]
# Print the line to verify the content and ensure we're targeting the right row
print(delta_export_average_line)
# Refine the regular expression to match specific numeric values, using longer patterns if possible
delta_export_values <- str_extract_all(delta_export_average_line, "\\b\\d{4,5}\\b")[[1]]  # Look for 4- or 5-digit numbers
# Inspect extracted values to identify the target (in this case, 5259 is expected)
print(delta_export_values)
# Assuming the correct index is known based on inspection, retrieve the value (e.g., 5259)
average_delta_export_value <- as.numeric(delta_export_values[1])  # Adjust the index if necessary
print(average_delta_export_value)
# Excel file path and current date
excel_file_path <- "historical_data/historical_data_full.xlsx"
current_month <- format(Sys.Date(), "%b")
current_year <- format(Sys.Date(), "%Y")
# Load the workbook and the specific sheet
delta_exports_workbook <- loadWorkbook(excel_file_path)
delta_exports_data <- readWorkbook(delta_exports_workbook, sheet = "Total_Delta_Exports")
# Ensure the Year column is character to match with the new data format
delta_exports_data$Year <- as.character(delta_exports_data$Year)
# Check if there's already an entry for the current month and year
existing_entry <- delta_exports_data %>%
filter(Month == current_month, Year == current_year)
if (nrow(existing_entry) > 0) {
# Update the existing row with the new average Delta Exports value
row_to_update <- which(delta_exports_data$Month == current_month &
delta_exports_data$Year == current_year)
delta_exports_data[row_to_update, "Exports"] <- average_delta_export_value
} else {
# Add a new row if it's a new month
new_row <- data.frame(
Month = current_month,
Year = current_year,
Exports = average_delta_export_value
)
# Append the new row
delta_exports_data <- bind_rows(delta_exports_data, new_row)
}
# Write the updated sheet back to the workbook
writeData(delta_exports_workbook, sheet = "Total_Delta_Exports", x = delta_exports_data)
# Save the workbook, preserving all sheets
saveWorkbook(delta_exports_workbook, excel_file_path, overwrite = TRUE)
message("Delta Exports data updated successfully for the current month.")
print(average_delta_export_value)
sacramento_current_month_CFS_average
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
sac_cond_daily_new <- cdec_query(station = "SRH", sensor_num = "100",
dur_code = "D", start_date = as.character(start_date),
end_date = as.character(end_date))
Sac_cond_monthly_average<-mean(sac_cond_daily_new$parameter_value, na.rm = T)
Sac_cond_monthly_average
#### ppm conversion
sac_ppm<-(Sac_cond_monthly_average*0.55)
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
SanJoaquin_cond_daily_new <- cdec_query(station = "VER", sensor_num = "100",
dur_code = "D", start_date = as.character(start_date),
end_date = as.character(end_date))
SanJoaquin_cond_monthly_average<-mean(SanJoaquin_cond_daily_new$parameter_value, na.rm = T)
SanJoaquin_cond_monthly_average
#### ppm conversion
SanJoa_ppm<-(SanJoaquin_cond_monthly_average*0.55)
SanJoa_ppm
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
Banks_cond_daily_new <- cdec_query(station = "HBP", sensor_num = "100",
dur_code = "D", start_date = as.character(start_date),
end_date = as.character(end_date))
#need to take the average of all parameter_value for the date
Banks_cond_monthly_average<-mean(Banks_cond_daily_new$parameter_value, na.rm = T)
Banks_cond_monthly_average
#convert um/cm to ppm
#idea to have some historical context with the salinity?
#### ppm conversion
Banks_ppm<-(Banks_cond_monthly_average*0.55)
Banks_ppm
knitr::opts_chunk$set(echo = FALSE)
#URL of pdf file
# ***** need to see if this pdf updates everyday with the same URL *******
northern_pdf_url <- "https://cdec.water.ca.gov/cgi-progs/products/PLOT_ESI.pdf"
#pathway to where you want the pdf to be saved
#can eventaully make the name of the pdf with the date it is downloaded
northern_pdf_file<-"C:/Users/jweidenfeld/Desktop/Rprojects/By_The_Numbers/data_output/northern_sierra.pdf"
# Download the PDF file
# The "wb" mode is typically used when downloading non-text files, such as images, PDFs, or other binary files. It tells R to open the file in binary mode, which is necessary for correctly handling binary data
download.file(northern_pdf_url, northern_pdf_file, mode = "wb")
# Extract text from the PDF
northern_pdf_text <- pdf_text(northern_pdf_file)
rm(list=ls())
library(rvest)
library(pdftools)
library(tidyverse)
library(stringr)
library(rvest)
library(xml2)
library(CDECRetrieve)
library(magrittr)
library(leaflet)
library(writexl)
library(readxl)
library(lubridate)
library(openxlsx)
library(geojsonio)
#URL of pdf file
# ***** need to see if this pdf updates everyday with the same URL *******
northern_pdf_url <- "https://cdec.water.ca.gov/cgi-progs/products/PLOT_ESI.pdf"
#pathway to where you want the pdf to be saved
#can eventaully make the name of the pdf with the date it is downloaded
northern_pdf_file<-"C:/Users/jweidenfeld/Desktop/Rprojects/By_The_Numbers/data_output/northern_sierra.pdf"
# Download the PDF file
# The "wb" mode is typically used when downloading non-text files, such as images, PDFs, or other binary files. It tells R to open the file in binary mode, which is necessary for correctly handling binary data
download.file(northern_pdf_url, northern_pdf_file, mode = "wb")
# Extract text from the PDF
northern_pdf_text <- pdf_text(northern_pdf_file)
# Print the extracted text
#print(northern_pdf_text)
getwd()
#URL of pdf file
#assigns a string value to the url
northern_pdf_url <- "https://cdec.water.ca.gov/cgi-progs/products/PLOT_ESI.pdf"
northern_pdf_file <- "data_output/northern_sierra.pdf"
# The "wb" mode is typically used when downloading non-text files, such as images, PDFs, or other binary files. It tells R to open the file in binary mode, which is necessary for correctly handling binary data
download.file(northern_pdf_url, northern_pdf_file, mode = "wb")
# Extract text from the PDF
northern_pdf_text <- pdf_text(northern_pdf_file)
# Initialize an empty vector to store the extracted values
N_sierra_current_precip <- c()
# Extract text from the PDF file
northern_pdf_text <- pdf_text(northern_pdf_file)
# Print the next four characters following "Current:" in each sentence
if (length(northern_pdf_text) > 0) {
for (sentence in northern_pdf_text) {
pattern <- "(?i)Current:\\s?(.{4})"
match <- regexpr(pattern, sentence, perl = TRUE)
if (match[1] != -1) {
northern_next_four <- regmatches(sentence, match)
# Extract the captured group (the four characters) and append to the vector
next_four <- sub(pattern, "\\1", northern_next_four)
N_sierra_current_precip <- c(N_sierra_current_precip, next_four)
# Print the formatted output as "Current: <next_four>"
cat(paste("Current:", next_four, "inches"))
} else {
cat("Next four characters after 'Current:' not found.")
}
}
} else {
cat("No text extracted from the PDF.")
}
print(northern_pdf_text)
#create an empty vector to store the extracted value of n. sierra current precip
N_sierra_current_precip <- c()
# Extract text from the PDF file
#northern_pdf_text <- pdf_text(northern_pdf_file)
# Print the next four characters following "Current:" in each sentence
if (length(northern_pdf_text) > 0) { # makes sure there is text in the file, if no text then will go to else
for (sentence in northern_pdf_text) {
pattern <- "(?i)Current:\\s?(.{4})" #?i indicates case sensitive for the word 'Current:' "\\s?" matches white space after
#(.{4}) indicates that we are looking for 4 characters after 'Current'
match <- regexpr(pattern, sentence, perl = TRUE)
if (match[1] != -1) {
northern_next_four <- regmatches(sentence, match)
# Extract the captured group (the four characters) and append to the vector
next_four <- sub(pattern, "\\1", northern_next_four)
N_sierra_current_precip <- c(N_sierra_current_precip, next_four)
# Print the formatted output as "Current: <next_four>"
cat(paste("Current:", next_four, "inches"))
} else {
cat("Next four characters after 'Current:' not found.")
}
}
} else {
cat("No text extracted from the PDF.")
}
rm(list=ls())
library(rvest)
library(pdftools)
library(tidyverse)
library(stringr)
library(rvest)
library(xml2)
library(CDECRetrieve)
library(magrittr)
library(leaflet)
library(writexl)
library(readxl)
library(lubridate)
library(openxlsx)
library(geojsonio)
#URL of pdf file
#assigns a string value to the url
northern_pdf_url <- "https://cdec.water.ca.gov/cgi-progs/products/PLOT_ESI.pdf"
#file pathway to save the pdf
northern_pdf_file <- "data_output/northern_sierra.pdf"
#saves file to specified destination
# wb means 'write binary mode' used for things that are non-text files (ex: pdfs)
download.file(northern_pdf_url, northern_pdf_file, mode = "wb")
# Extract text from the PDF from the file location
#returns it as a character vector
northern_pdf_text <- pdf_text(northern_pdf_file)
# Prints the extracted text (keep unchecked)
#print(northern_pdf_text)
# Extract text from the PDF file
northern_pdf_text <- pdf_text(northern_pdf_file)
# Define the pattern to extract the number next to "Current:"
pattern <- "(?i)Current:\\s?(.{4})"
# Initialize a variable to store the extracted number
N_sierra_current_precip <- NULL
# Search for the pattern in the text
if (length(northern_pdf_text) > 0) {
for (sentence in northern_pdf_text) {
match <- regexpr(pattern, sentence, perl = TRUE)
if (match[1] != -1) {
# Extract the number using the captured group
northern_next_four <- regmatches(sentence, match)
N_sierra_current_precip <- sub(pattern, "\\1", northern_next_four)
cat(paste("Extracted value:", N_sierra_current_precip, "inches\n"))
break  # Stop the loop after finding the first match
}
}
} else {
cat("No text extracted from the PDF.")
}
print(northern_pdf_text)
#create an empty vector to store the extracted value of n. sierra current precip
N_sierra_current_precip <- c()
# Extract text from the PDF file
#northern_pdf_text <- pdf_text(northern_pdf_file)
# Print the next four characters following "Current:" in each sentence
#loops through all 'sentences in the pdf until it finds the correct word and numbers
if (length(northern_pdf_text) > 0) { # makes sure there is text in the file, if no text then will go to else
for (sentence in northern_pdf_text) {
pattern <- "(?i)Current:\\s?(.{4})" #?i indicates case sensitive for the word 'Current:' "\\s?" matches white space after
#(.{4}) indicates that we are looking for 4 characters after 'Current'
match <- regexpr(pattern, sentence, perl = TRUE) # this searches the current sentence for the 'pattern' above
if (match[1] != -1) { # where the pattern starts, we want it to start at the begining of 'Current'
northern_next_four <- regmatches(sentence, match)
# Extract the captured group (the four characters, ie the amount of rainfall) and add to the vector
next_four <- sub(pattern, "\\1", northern_next_four) #\\1 isolates the precipitation value from the larger text & stores variable
N_sierra_current_precip <- c(N_sierra_current_precip, next_four)
# Print the formatted output as "Current: <next_four>"
cat(paste("Current:", next_four, "inches"))
} else {
cat("Next four characters after 'Current:' not found.")
}
}
} else {
cat("No text extracted from the PDF.")
}
# Extract text from the PDF file
northern_pdf_text <- pdf_text(northern_pdf_file)
# Define the pattern to extract the number next to "Current:"
pattern <- "(?i)Current:\\s?(.{4})"  #(.{4}) indicates that we are looking for 4 characters after 'Current'
#?i indicates case sensitive for the word 'Current:' "\\s?" matches white space after
# Initialize a variable to store the extracted number
N_sierra_current_precip <- NULL
# Search for the pattern in the text
if (length(northern_pdf_text) > 0) {
for (sentence in northern_pdf_text) {
match <- regexpr(pattern, sentence, perl = TRUE)
if (match[1] != -1) {
# Extract the number using the captured group
northern_next_four <- regmatches(sentence, match)
N_sierra_current_precip <- sub(pattern, "\\1", northern_next_four)
cat(paste("Current:", N_sierra_current_precip, "inches\n"))
break  # Stop the loop after finding the first match
}
}
} else {
cat("No text extracted from the PDF.")
}
# Create an empty vector to store the extracted value
N_sierra_average_precip <- c()
# Extract text from the PDF file
northern_pdf_text <- pdf_text(northern_pdf_file)
# Check if the PDF text is not empty
if (length(northern_pdf_text) > 0) {
# Concatenate all the text into a single string
combined_text <- paste(northern_pdf_text, collapse = " ")
# Define the pattern to match the "Percent of Average for this Date:" followed by the percentage value
pattern <- "(?i)Percent of Average for this Date:\\s*(\\d+%)"
# Extract the match using regmatches and regexpr
northern_next_four <- regmatches(combined_text, regexpr(pattern, combined_text, perl = TRUE))
if (length(northern_next_four) > 0) {
# Extract the percentage value using a capturing group
percent_value <- sub("(?i)Percent of Average for this Date:\\s*(\\d+%)", "\\1", northern_next_four)
# Append the value to the vector
N_sierra_average_precip <- c(N_sierra_average_precip, percent_value)
# Print only the percentage value
cat(percent_value, "\n")
} else {
cat("Percent of Average for this Date not found.\n")
}
} else {
cat("No text extracted from the PDF.\n")
}
# Create an empty vector to store the extracted value
N_sierra_average_precip <- c()
# Extract text from the PDF file
northern_pdf_text <- pdf_text(northern_pdf_file)
# Check if the PDF text is not empty
if (length(northern_pdf_text) > 0) {
# Concatenate all the text into a single string
combined_text <- paste(northern_pdf_text, collapse = " ")
# Define the pattern to match the "Percent of Average for this Date:" followed by the percentage value
pattern <- "(?i)Percent of Average for this Date:\\s*(\\d+%)"
# Extract the match using regmatches and regexpr
northern_next_four <- regmatches(combined_text, regexpr(pattern, combined_text, perl = TRUE))
if (length(northern_next_four) > 0) {
# Extract the percentage value using a capturing group
percent_value <- sub("(?i)Percent of Average for this Date:\\s*(\\d+%)", "\\1", northern_next_four)
# Append the value to the vector
N_sierra_average_precip <- c(N_sierra_average_precip, percent_value)
# Print only the percentage value
cat("Percent of Average for this Date:", percent_value, "\n")
} else {
cat("Percent of Average for this Date not found.\n")
}
} else {
cat("No text extracted from the PDF.\n")
}
# Create an empty vector to store the extracted value
N_sierra_average_precip <- c()
# Extract text from the PDF file
northern_pdf_text <- pdf_text(northern_pdf_file)
# Check if the PDF text is not empty
if (length(northern_pdf_text) > 0) {
# Concatenate all the text into a single string
combined_text <- paste(northern_pdf_text, collapse = " ")
# Define the pattern to match the "Percent of Average for this Date:" followed by the percentage value
pattern <- "(?i)Percent of Average for this Date:\\s*(\\d+%)"
# Extract the match using regmatches and regexpr
northern_next_four <- regmatches(combined_text, regexpr(pattern, combined_text, perl = TRUE))
if (length(northern_next_four) > 0) {
# Extract the percentage value using a capturing group
percent_value <- sub("(?i)Percent of Average for this Date:\\s*(\\d+%)", "\\1", northern_next_four)
# Append the value to the vector
N_sierra_average_precip <- c(N_sierra_average_precip, percent_value)
# Print only the percentage value
cat("Percent of Average for this Date:", percent_value, "\n")
} else {
cat("Percent of Average for this Date not found.\n")
}
} else {
cat("No text extracted from the PDF.\n")
}
# Extract text from the PDF file
northern_pdf_text <- pdf_text(northern_pdf_file)
# Define the pattern to extract the number next to "Current:"
pattern <- "(?i)Current:\\s?(.{4})"  #(.{4}) indicates that we are looking for 4 characters after 'Current'
#?i indicates case sensitive for the word 'Current:' "\\s?" matches white space after
# Initialize a variable to store the extracted number
N_sierra_current_precip <- NULL
# Search for the pattern in the text
if (length(northern_pdf_text) > 0) {
for (sentence in northern_pdf_text) { #sentence is a tempory placeholder for the term we are looking for
match <- regexpr(pattern, sentence, perl = TRUE)
if (match[1] != -1) {
# Extract the number using the captured group
northern_next_four <- regmatches(sentence, match)
N_sierra_current_precip <- sub(pattern, "\\1", northern_next_four)
cat(paste( N_sierra_current_precip, "inches\n"))
break  # Stop the loop after finding the first match of Current and the 4 numbers after it
}
}
} else {
cat("No text extracted from the PDF.")
}
# Create an empty vector to store the extracted value
N_sierra_average_precip <- c()
# Extract text from the PDF file
northern_pdf_text <- pdf_text(northern_pdf_file)
# Check if the PDF text is not empty
if (length(northern_pdf_text) > 0) {
# Concatenate all the text into a single string
combined_text <- paste(northern_pdf_text, collapse = " ")
# Define the pattern to match the "Percent of Average for this Date:" followed by the percentage value
pattern <- "(?i)Percent of Average for this Date:\\s*(\\d+%)"
# Extract the match using regmatches and regexpr
northern_next_four <- regmatches(combined_text, regexpr(pattern, combined_text, perl = TRUE))
if (length(northern_next_four) > 0) {
# Extract the percentage value using a capturing group
percent_value <- sub("(?i)Percent of Average for this Date:\\s*(\\d+%)", "\\1", northern_next_four)
# Append the value to the vector
N_sierra_average_precip <- c(N_sierra_average_precip, percent_value)
# Print only the percentage value
cat(percent_value, "\n")
} else {
cat("Percent of Average for this Date not found.\n")
}
} else {
cat("No text extracted from the PDF.\n")
}
#Central Sierra precipitation #Pulling and downloading the pdf from online
#URL of pdf file
# ***** need to see if this pdf updates everyday with the same URL *******
central_ppt_pdf_url <- "https://cdec.water.ca.gov/cgi-progs/products/PLOT_FSI.pdf"
#pathway to where you want the pdf to be saved
#can eventaully make the name of the pdf with the date it is downloaded
central_ppt_pdf_file2<-"C:/Users/jweidenfeld/Desktop/Rprojects/By_The_Numbers/data_output/central_sierra2.pdf"
# Download the PDF file
# The "wb" mode is typically used when downloading non-text files, such as images, PDFs, or other binary files. It tells R to open the file in binary mode, which is necessary for correctly handling binary data
download.file(central_ppt_pdf_url, central_ppt_pdf_file2, mode = "wb")
# Extract text from the PDF
central_pdf_text <- pdf_text(central_ppt_pdf_file2)
# Print the extracted text
print(central_pdf_text)
#create an empty vector
Central_current_precip <- c()
# Adjusted pattern for "Current:"
if (length(central_pdf_text) > 0) {
for (sentence in central_pdf_text) {
pattern <- "(?i)Current[:\\s]+(.{4})"
next_four <- regmatches(sentence, regexpr(pattern, sentence, perl = TRUE))
if (length(next_four) > 0) {
# Append the value of next_four to the vector
Central_current_precip <- c(Central_current_precip, next_four)
cat(paste(next_four, "inches\n"))
} else {
cat("Next four characters after 'Current:' not found.\n")
}
}
} else {
cat("No text extracted from the PDF.")
}
Central_current_precip
# Create an empty vector
Central_current_precip <- c()
# Adjusted pattern for "Current:"
if (length(central_pdf_text) > 0) {
for (sentence in central_pdf_text) {
# Pattern to match "Current:" and capture the 4 characters after it
pattern <- "(?i)Current[:\\s]+(.{4})"
# Extract the matched text
next_four <- regmatches(sentence, regexpr(pattern, sentence, perl = TRUE))
if (length(next_four) > 0) {
# Extract only the captured group (the 4 characters) and not "Current:"
number_only <- sub(pattern, "\\1", next_four)
# Append the value of number_only to the vector
Central_current_precip <- c(Central_current_precip, number_only)
# Print only the number
cat(paste(number_only, "inches\n"))
} else {
cat("Next four characters after 'Current:' not found.\n")
}
}
} else {
cat("No text extracted from the PDF.\n")
}
#create an empty vector
Central_current_precip <- c()
# Adjusted pattern for "Current:"
if (length(central_pdf_text) > 0) {
for (sentence in central_pdf_text) {
pattern <- "(?i)Current[:\\s]+(.{4})"
next_four <- regmatches(sentence, regexpr(pattern, sentence, perl = TRUE))
if (length(next_four) > 0) {
# Append the value of next_four to the vector
Central_current_precip <- c(Central_current_precip, next_four)
cat(paste(next_four, "inches\n"))
} else {
cat("Next four characters after 'Current:' not found.\n")
}
}
} else {
cat("No text extracted from the PDF.")
}
