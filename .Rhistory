delta_export_average_line <- delta_export_lines[str_detect(delta_export_lines, "Average")]
# Print the extracted line for debugging
print(delta_export_average_line)
# Split the line into individual elements (numbers & text) by whitespace
str_split(delta_export_average_line, "\\s+")
# Print the extracted elements to verify structure
print(delta_export_numbers)
# URL of the PDF file
delta_exports_pdf_url <- "https://www.usbr.gov/mp/cvo/vungvari/doutdly.pdf"
# Path to save the downloaded PDF file
delta_exports_pdf_file <- "historical_data/delta_exports.pdf"
# Download the PDF file
download.file(delta_exports_pdf_url, delta_exports_pdf_file, mode = "wb")
# Extract text from the PDF file
delta_exports_pdf_text <- pdf_text(delta_exports_pdf_file)
# Extract the last page's text
delta_export_last_page_text <- delta_exports_pdf_text[length(delta_exports_pdf_text)]
# Split the text into lines
delta_export_lines <- str_split(delta_export_last_page_text, "\\n")[[1]]
# Find the line containing the "Average" row
delta_export_average_line <- delta_export_lines[str_detect(delta_export_lines, "Average")]
# Define delta_export_numbers before using it
delta_export_numbers <- str_split(delta_export_average_line, "\\s+")[[1]]
# Print extracted elements for debugging
print(delta_export_numbers)
# Extract only numeric values
numeric_values <- delta_export_numbers[str_detect(delta_export_numbers, "^\\d{1,5}[,\\.]?\\d*$")]
print(numeric_values)
# Extract the 17th numeric value
if (length(numeric_values) >= 17) {
average_delta_export_value <- as.numeric(gsub(",", "", numeric_values[17]))
} else {
warning("Could not find the 17th numeric value. Check the PDF format.")
average_delta_export_value <- NA
}
# Print final extracted value
print(average_delta_export_value)
# Extract the 17th numeric value
if (length(numeric_values) >= 14) {
average_delta_export_value <- as.numeric(gsub(",", "", numeric_values[14]))
} else {
warning("Could not find the 17th numeric value. Check the PDF format.")
average_delta_export_value <- NA
}
# Print final extracted value
print(average_delta_export_value)
# URL of the PDF file
delta_exports_pdf_url <- "https://www.usbr.gov/mp/cvo/vungvari/doutdly.pdf"
# Path to save the downloaded PDF file
delta_exports_pdf_file <- "historical_data/delta_exports.pdf"
# Download the PDF file
download.file(delta_exports_pdf_url, delta_exports_pdf_file, mode = "wb")
# Extract text from the PDF file
delta_exports_pdf_text <- pdf_text(delta_exports_pdf_file)
# Extract the last page's text
delta_export_last_page_text <- delta_exports_pdf_text[length(delta_exports_pdf_text)]
# Split the text into lines
delta_export_lines <- str_split(delta_export_last_page_text, "\\n")[[1]]
# Find the line containing the "Average" row
delta_export_average_line <- delta_export_lines[str_detect(delta_export_lines, "Average")]
# Define delta_export_numbers correctly
delta_export_numbers <- str_split(delta_export_average_line, "\\s+")[[1]]
# Print extracted elements for debugging
print(delta_export_numbers)
# Extract only numeric values
numeric_values <- delta_export_numbers[str_detect(delta_export_numbers, "^\\d{1,5}[,\\.]?\\d*$")]
print(numeric_values)
# Extract the 14th numeric value safely
if (length(numeric_values) >= 14) {
average_delta_export_value <- as.numeric(gsub(",", "", numeric_values[14]))
} else {
warning("Could not find the 14th numeric value. Check the PDF format.")
average_delta_export_value <- NA
}
# Print the final extracted value
print(average_delta_export_value)
# Excel file path and current date
excel_file_path <- "historical_data/historical_data_full.xlsx"
current_month <- format(Sys.Date(), "%b")
current_year <- format(Sys.Date(), "%Y")
# Load the workbook and specific sheet
delta_exports_workbook <- loadWorkbook(excel_file_path)
delta_exports_data <- readWorkbook(delta_exports_workbook, sheet = "Total_Delta_Exports")
delta_exports_data$Year <- as.character(delta_exports_data$Year)
# Check for existing entry
existing_entry <- delta_exports_data %>%
filter(Month == current_month, Year == current_year)
if (nrow(existing_entry) > 0) {
row_to_update <- which(delta_exports_data$Month == current_month &
delta_exports_data$Year == current_year)
delta_exports_data[row_to_update, "Exports"] <- average_delta_export_value
} else {
new_row <- data.frame(
Month = current_month,
Year = current_year,
Exports = average_delta_export_value
)
delta_exports_data <- bind_rows(delta_exports_data, new_row)
}
# Write the updated sheet back to the workbook
writeData(delta_exports_workbook, sheet = "Total_Delta_Exports", x = delta_exports_data)
# Save the workbook
saveWorkbook(delta_exports_workbook, excel_file_path, overwrite = TRUE)
# Print confirmation message
message(sprintf("Total Delta Exports monthly average for %s has been recorded.", current_month))
# URL of the PDF file
delta_exports_pdf_url <- "https://www.usbr.gov/mp/cvo/vungvari/doutdly.pdf"
# Path to save the downloaded PDF file
delta_exports_pdf_file <- "historical_data/delta_exports.pdf"
# Download the PDF file
download.file(delta_exports_pdf_url, delta_exports_pdf_file, mode = "wb")
# Extract text from the PDF file
delta_exports_pdf_text <- pdf_text(delta_exports_pdf_file)
# Extract the last page's text, where the "Average" row appears
delta_export_last_page_text <- delta_exports_pdf_text[length(delta_exports_pdf_text)]
# Split the text into lines
delta_export_lines <- str_split(delta_export_last_page_text, "\n")[[1]]
# Find the line containing the "Average" row
delta_export_average_line <- delta_export_lines[str_detect(delta_export_lines, "Average")]
# Print the extracted line for debugging
print(delta_export_average_line)
# Split the line into individual elements (numbers & text) by whitespace
str_split(delta_export_average_line, "\\s+")
# Print the extracted elements to verify structure
print(delta_export_numbers)
# Extract the 17th number (ensuring only numeric values are considered)
numeric_values <- delta_export_numbers[str_detect(delta_export_numbers, "^\\d{1,5}[,\\.]?\\d*$")]  # Filter only numbers
# Print extracted numeric values for debugging
print(numeric_values)
# Extract the 17th numeric value safely
if (length(numeric_values) >= 17) {
average_delta_export_value <- as.numeric(gsub(",", "", numeric_values[17]))  # Remove commas & convert
} else {
warning("Could not find the 17th numeric value. Check the PDF format.")
average_delta_export_value <- NA
}
# Print the final extracted value
print(average_delta_export_value)
# Excel file path and current date
excel_file_path <- "historical_data/historical_data_full.xlsx"
current_month <- format(Sys.Date(), "%b")
current_year <- format(Sys.Date(), "%Y")
# Load the workbook and the specific sheet
delta_exports_workbook <- loadWorkbook(excel_file_path)
delta_exports_data <- readWorkbook(delta_exports_workbook, sheet = "Total_Delta_Exports")
# Ensure the Year column is character to match with the new data format
delta_exports_data$Year <- as.character(delta_exports_data$Year)
# Check if there's already an entry for the current month and year
existing_entry <- delta_exports_data %>%
filter(Month == current_month, Year == current_year)
if (nrow(existing_entry) > 0) {
# Update the existing row with the new average Delta Exports value
row_to_update <- which(delta_exports_data$Month == current_month &
delta_exports_data$Year == current_year)
delta_exports_data[row_to_update, "Exports"] <- average_delta_export_value
} else {
# Add a new row if it's a new month
new_row <- data.frame(
Month = current_month,
Year = current_year,
Exports = average_delta_export_value
)
# Append the new row
delta_exports_data <- bind_rows(delta_exports_data, new_row)
}
# Write the updated sheet back to the workbook
writeData(delta_exports_workbook, sheet = "Total_Delta_Exports", x = delta_exports_data)
# Save the workbook, preserving all sheets
saveWorkbook(delta_exports_workbook, excel_file_path, overwrite = TRUE)
rm(list=ls())
library(rvest)
library(pdftools)
library(tidyverse)
library(stringr)
library(rvest)
library(xml2)
library(CDECRetrieve)
library(magrittr)
library(leaflet)
library(writexl)
library(readxl)
library(lubridate)
library(openxlsx)
library(geojsonio)
#options(repos = c(
# sbashevkin = 'https://sbashevkin.r-universe.dev',
#  CRAN = 'https://cloud.r-project.org'))
#install.packages("deltamapr")
library(deltamapr)
# URL of the PDF file
delta_exports_pdf_url <- "https://www.usbr.gov/mp/cvo/vungvari/doutdly.pdf"
# Path to save the downloaded PDF file
delta_exports_pdf_file <- "historical_data/delta_exports.pdf"
# Download the PDF file
download.file(delta_exports_pdf_url, delta_exports_pdf_file, mode = "wb")
# Extract text from the PDF file
delta_exports_pdf_text <- pdf_text(delta_exports_pdf_file)
# Extract the last page's text, where the "Average" row appears
delta_export_last_page_text <- delta_exports_pdf_text[length(delta_exports_pdf_text)]
# Split the text into lines
delta_export_lines <- str_split(delta_export_last_page_text, "\n")[[1]]
# Find the line containing the "Average" row
delta_export_average_line <- delta_export_lines[str_detect(delta_export_lines, "Average")]
# Print the extracted line for debugging
print(delta_export_average_line)
# Split the line into individual elements (numbers & text) by whitespace
str_split(delta_export_average_line, "\\s+")
# Print the extracted elements to verify structure
print(delta_export_numbers)
# URL of the PDF file
delta_exports_pdf_url <- "https://www.usbr.gov/mp/cvo/vungvari/doutdly.pdf"
# Path to save the downloaded PDF file
delta_exports_pdf_file <- "historical_data/delta_exports.pdf"
# Download the PDF file
download.file(delta_exports_pdf_url, delta_exports_pdf_file, mode = "wb")
# Extract text from the PDF file
delta_exports_pdf_text <- pdf_text(delta_exports_pdf_file)
# Extract the last page's text
delta_export_last_page_text <- delta_exports_pdf_text[length(delta_exports_pdf_text)]
# Split the text into lines
delta_export_lines <- str_split(delta_export_last_page_text, "\\n")[[1]]
# Find the line containing the "Average" row
delta_export_average_line <- delta_export_lines[str_detect(delta_export_lines, "Average")]
# Define delta_export_numbers before use
delta_export_numbers <- str_split(delta_export_average_line, "\\s+")[[1]]
# Print extracted elements for debugging
print(delta_export_numbers)
# Extract numeric values
numeric_values <- delta_export_numbers[str_detect(delta_export_numbers, "^\\d{1,5}[,\\.]?\\d*$")]
# Print numeric values for debugging
print(numeric_values)
# Extract the 17th numeric value
if (length(numeric_values) >= 17) {
average_delta_export_value <- as.numeric(gsub(",", "", numeric_values[17]))
} else {
warning("Could not find the 17th numeric value. Check the PDF format.")
average_delta_export_value <- NA
}
# Print the final extracted value
print(average_delta_export_value)
# Excel file path and current date
excel_file_path <- "historical_data/historical_data_full.xlsx"
current_month <- format(Sys.Date(), "%b")
current_year <- format(Sys.Date(), "%Y")
# Load workbook and sheet
delta_exports_workbook <- loadWorkbook(excel_file_path)
delta_exports_data <- readWorkbook(delta_exports_workbook, sheet = "Total_Delta_Exports")
delta_exports_data$Year <- as.character(delta_exports_data$Year)
# Check for existing entry
existing_entry <- delta_exports_data %>%
filter(Month == current_month, Year == current_year)
if (nrow(existing_entry) > 0) {
row_to_update <- which(delta_exports_data$Month == current_month &
delta_exports_data$Year == current_year)
delta_exports_data[row_to_update, "Exports"] <- average_delta_export_value
} else {
new_row <- data.frame(
Month = current_month,
Year = current_year,
Exports = average_delta_export_value
)
delta_exports_data <- bind_rows(delta_exports_data, new_row)
}
# Write updated sheet back to the workbook
writeData(delta_exports_workbook, sheet = "Total_Delta_Exports", x = delta_exports_data)
# Save the workbook
saveWorkbook(delta_exports_workbook, excel_file_path, overwrite = TRUE)
# URL of the PDF file
delta_exports_pdf_url <- "https://www.usbr.gov/mp/cvo/vungvari/doutdly.pdf"
# Path to save the downloaded PDF file
delta_exports_pdf_file <- "historical_data/delta_exports.pdf"
# Download the PDF file
download.file(delta_exports_pdf_url, delta_exports_pdf_file, mode = "wb")
# Extract text from the PDF file
delta_exports_pdf_text <- pdf_text(delta_exports_pdf_file)
# Extract the last page's text
delta_export_last_page_text <- delta_exports_pdf_text[length(delta_exports_pdf_text)]
# Split the text into lines
delta_export_lines <- str_split(delta_export_last_page_text, "\\n")[[1]]
# Find the line containing the "Average" row
delta_export_average_line <- delta_export_lines[str_detect(delta_export_lines, "Average")]
# Define delta_export_numbers before use
delta_export_numbers <- str_split(delta_export_average_line, "\\s+")[[1]]
# Print extracted elements for debugging
print(delta_export_numbers)
# Extract numeric values
numeric_values <- delta_export_numbers[str_detect(delta_export_numbers, "^\\d{1,5}[,\\.]?\\d*$")]
# Print numeric values for debugging
print(numeric_values)
# Extract the 17th numeric value
if (length(numeric_values) >= 14) {
average_delta_export_value <- as.numeric(gsub(",", "", numeric_values[14]))
} else {
warning("Could not find the 14th numeric value. Check the PDF format.")
average_delta_export_value <- NA
}
# Print the final extracted value
print(average_delta_export_value)
# Excel file path and current date
excel_file_path <- "historical_data/historical_data_full.xlsx"
current_month <- format(Sys.Date(), "%b")
current_year <- format(Sys.Date(), "%Y")
# Load workbook and sheet
delta_exports_workbook <- loadWorkbook(excel_file_path)
delta_exports_data <- readWorkbook(delta_exports_workbook, sheet = "Total_Delta_Exports")
delta_exports_data$Year <- as.character(delta_exports_data$Year)
# Check for existing entry
existing_entry <- delta_exports_data %>%
filter(Month == current_month, Year == current_year)
if (nrow(existing_entry) > 0) {
row_to_update <- which(delta_exports_data$Month == current_month &
delta_exports_data$Year == current_year)
delta_exports_data[row_to_update, "Exports"] <- average_delta_export_value
} else {
new_row <- data.frame(
Month = current_month,
Year = current_year,
Exports = average_delta_export_value
)
delta_exports_data <- bind_rows(delta_exports_data, new_row)
}
# Write updated sheet back to the workbook
writeData(delta_exports_workbook, sheet = "Total_Delta_Exports", x = delta_exports_data)
# Save the workbook
saveWorkbook(delta_exports_workbook, excel_file_path, overwrite = TRUE)
# URL of the PDF file
delta_exports_pdf_url <- "https://www.usbr.gov/mp/cvo/vungvari/doutdly.pdf"
# Path to save the downloaded PDF file
delta_exports_pdf_file <- "historical_data/delta_exports.pdf"
# Download the PDF file
download.file(delta_exports_pdf_url, delta_exports_pdf_file, mode = "wb")
# Extract text from the PDF file
delta_exports_pdf_text <- pdf_text(delta_exports_pdf_file)
# Extract the last page's text
delta_export_last_page_text <- delta_exports_pdf_text[length(delta_exports_pdf_text)]
# Split the text into lines
delta_export_lines <- str_split(delta_export_last_page_text, "\\n")[[1]]
# Find the line containing the "Average" row
delta_export_average_line <- delta_export_lines[str_detect(delta_export_lines, "Average")]
# Define delta_export_numbers before use
delta_export_numbers <- str_split(delta_export_average_line, "\\s+")[[1]]
# Print extracted elements for debugging
print(delta_export_numbers)
# Extract numeric values
numeric_values <- delta_export_numbers[str_detect(delta_export_numbers, "^\\d{1,5}[,\\.]?\\d*$")]
# Print numeric values for debugging
print(numeric_values)
# Extract the 17th numeric value
if (length(numeric_values) >= 14) {
average_delta_export_value <- as.numeric(gsub(",", "", numeric_values[14]))
} else {
warning("Could not find the 14th numeric value. Check the PDF format.")
average_delta_export_value <- NA
}
# Print the final extracted value
print(average_delta_export_value)
# Excel file path and current date
excel_file_path <- "historical_data/historical_data_full.xlsx"
current_month <- format(Sys.Date(), "%b")
current_year <- format(Sys.Date(), "%Y")
# Load workbook and sheet
delta_exports_workbook <- loadWorkbook(excel_file_path)
delta_exports_data <- readWorkbook(delta_exports_workbook, sheet = "Total_Delta_Exports")
delta_exports_data$Year <- as.character(delta_exports_data$Year)
# Check for existing entry
existing_entry <- delta_exports_data %>%
filter(Month == current_month, Year == current_year)
if (nrow(existing_entry) > 0) {
row_to_update <- which(delta_exports_data$Month == current_month &
delta_exports_data$Year == current_year)
delta_exports_data[row_to_update, "Exports"] <- average_delta_export_value
} else {
new_row <- data.frame(
Month = current_month,
Year = current_year,
Exports = average_delta_export_value
)
delta_exports_data <- bind_rows(delta_exports_data, new_row)
}
# Write updated sheet back to the workbook
writeData(delta_exports_workbook, sheet = "Total_Delta_Exports", x = delta_exports_data)
# Save the workbook
saveWorkbook(delta_exports_workbook, excel_file_path, overwrite = TRUE)
# Determine the current month and year
delta_export_current_month <- format(Sys.Date(), "%b")
delta_export_current_year <- format(Sys.Date(), "%Y")
# Load the entire workbook without overwriting other sheets
delta_export_workbook <- loadWorkbook(san_joaquin_file_path)
# Excel file path and current date
delta_export_file_path <- "historical_data/historical_data_full.xlsx"
# Load the entire workbook without overwriting other sheets
delta_export_workbook <- loadWorkbook(san_joaquin_file_path)
# Load the entire workbook without overwriting other sheets
delta_export_workbook <- loadWorkbook(delta_export_file_path)
# Read the specific sheet you want to update
delta_export_historical_data <- readWorkbook(delta_export_workbook, sheet = "Flow_SanJoaq")
delta_export_historical_data$Year <- as.character(delta_export_historical_data$Year) # Ensure Year is character
# Calculate the historical mean for the current month, if available in your data
delta_export_current_month_historical_data <- delta_export_historical_data %>%
filter(Month == delta_export_current_month) %>%
select(Average_Flow_Daily)
delta_export_current_month_historical_data
delta_export_current_month_historical_mean <- mean(delta_export_current_month_historical_data$Average_Flow_Daily, na.rm = TRUE)
delta_export_current_month_historical_mean
# Calculate the percentage of the current month’s average relative to the historical average
delta_export_percentage_of_cfs_average <- (delta_export_export_monthly_average / delta_export_current_month_historical_mean) * 100
# Calculate the percentage of the current month’s average relative to the historical average
delta_export_percentage_of_cfs_average <- (average_delta_export_value / delta_export_current_month_historical_mean) * 100
delta_export_percentage_of_cfs_average
# Print only the percentage result
message(sprintf("Total Delta export monthly average is %.2f%% of the historical average for %s",
delta_export_percentage_of_cfs_average, delta_export_current_month))
rm(list=ls())
library(rvest)
library(pdftools)
library(tidyverse)
library(stringr)
library(rvest)
library(xml2)
library(CDECRetrieve)
library(magrittr)
library(leaflet)
library(writexl)
library(readxl)
library(lubridate)
library(openxlsx)
library(geojsonio)
#options(repos = c(
# sbashevkin = 'https://sbashevkin.r-universe.dev',
#  CRAN = 'https://cloud.r-project.org'))
#install.packages("deltamapr")
library(deltamapr)
# URL of the PDF file
delta_exports_pdf_url <- "https://www.usbr.gov/mp/cvo/vungvari/doutdly.pdf"
# Path to save the downloaded PDF file
delta_exports_pdf_file <- "historical_data/delta_exports.pdf"
# Download the PDF file
download.file(delta_exports_pdf_url, delta_exports_pdf_file, mode = "wb")
# Extract text from the PDF file
delta_exports_pdf_text <- pdf_text(delta_exports_pdf_file)
# Extract the last page's text
delta_export_last_page_text <- delta_exports_pdf_text[length(delta_exports_pdf_text)]
# Split the text into lines
delta_export_lines <- str_split(delta_export_last_page_text, "\\n")[[1]]
# Find the line containing the "Average" row
delta_export_average_line <- delta_export_lines[str_detect(delta_export_lines, "Average")]
# Define delta_export_numbers before use
delta_export_numbers <- str_split(delta_export_average_line, "\\s+")[[1]]
# Print extracted elements for debugging
print(delta_export_numbers)
# Extract numeric values
numeric_values <- delta_export_numbers[str_detect(delta_export_numbers, "^\\d{1,5}[,\\.]?\\d*$")]
# Print numeric values for debugging
print(numeric_values)
# Extract the 17th numeric value
if (length(numeric_values) >= 14) {
average_delta_export_value <- as.numeric(gsub(",", "", numeric_values[14]))
} else {
warning("Could not find the 14th numeric value. Check the PDF format.")
average_delta_export_value <- NA
}
# Print the final extracted value
print(average_delta_export_value)
# Excel file path and current date
delta_export_file_path <- "historical_data/historical_data_full.xlsx"
current_month <- format(Sys.Date(), "%b")
current_year <- format(Sys.Date(), "%Y")
# Load workbook and sheet
delta_exports_workbook <- loadWorkbook(delta_export_file_path)
delta_exports_data <- readWorkbook(delta_exports_workbook, sheet = "Total_Delta_Exports")
delta_exports_data$Year <- as.character(delta_exports_data$Year)
# Check for existing entry
existing_entry <- delta_exports_data %>%
filter(Month == current_month, Year == current_year)
if (nrow(existing_entry) > 0) {
row_to_update <- which(delta_exports_data$Month == current_month &
delta_exports_data$Year == current_year)
delta_exports_data[row_to_update, "Exports"] <- average_delta_export_value
} else {
new_row <- data.frame(
Month = current_month,
Year = current_year,
Exports = average_delta_export_value
)
delta_exports_data <- bind_rows(delta_exports_data, new_row)
}
# Write updated sheet back to the workbook
writeData(delta_exports_workbook, sheet = "Total_Delta_Exports", x = delta_exports_data)
# Save the workbook
saveWorkbook(delta_exports_workbook, excel_file_path, overwrite = TRUE)
# Save the workbook
saveWorkbook(delta_exports_workbook, delta_export_file_path, overwrite = TRUE)
# Determine the current month and year
delta_export_current_month <- format(Sys.Date(), "%b")
delta_export_current_year <- format(Sys.Date(), "%Y")
# Load the entire workbook without overwriting other sheets
delta_export_workbook <- loadWorkbook(delta_export_file_path)
# Read the specific sheet you want to update
delta_export_historical_data <- readWorkbook(delta_export_workbook, sheet = "Flow_SanJoaq")
delta_export_historical_data$Year <- as.character(delta_export_historical_data$Year) # Ensure Year is character
# Calculate the historical mean for the current month, if available in your data
delta_export_current_month_historical_data <- delta_export_historical_data %>%
filter(Month == delta_export_current_month) %>%
select(Average_Flow_Daily)
delta_export_current_month_historical_mean <- mean(delta_export_current_month_historical_data$Average_Flow_Daily, na.rm = TRUE)
delta_export_current_month_historical_mean
# Calculate the percentage of the current month’s average relative to the historical average
delta_export_percentage_of_cfs_average <- (average_delta_export_value / delta_export_current_month_historical_mean) * 100
delta_export_percentage_of_cfs_average
# Print only the percentage result
message(sprintf("Total Delta export monthly average is %.2f%% of the historical average for %s",
delta_export_percentage_of_cfs_average, delta_export_current_month))
