addMarkers(lng = 	-119.302000, lat = 	37.145000, popup = "Shasta Reservoir") %>%    # Shasta reservoir (SHA)
addMarkers(lng = -121.133000, lat = 37.033000, popup = "San Luis Reservoir")   # San Luis reservoir (SNL)
# URL of the website to scrape
reservoir_url <- "https://cdec.water.ca.gov/reportapp/javareports?name=RES"
# Read the web page
reservoir_web_page <- read_html(reservoir_url)
# Extract the table node
reservoir_table_node <- html_node(reservoir_web_page, "table")
# Extract the table content into a data frame
reservoir_table_data <- html_table(reservoir_table_node)
# Print the entire table data
print(reservoir_table_data)
# Extract a specific numbers [row, column]
# Shasta (at Sacramento River)
# extract percent of average storage
shasta_percent_average_storage_value <- as.numeric(reservoir_table_data[10, 9])
# extract percent of capacity
shasta_percent_capacity_value <- as.numeric(reservoir_table_data[10, 7])
# Print the formatted output with a Markdown header
cat(sprintf(" Shasta Reservoir: %.0f%% of average storage, %.0f%% of total capacity.\n",
shasta_percent_average_storage_value, shasta_percent_capacity_value))
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
sac_cond_daily_new <- cdec_query(station = "SRH", sensor_num = "100",
dur_code = "D", start_date = as.character(start_date),
end_date = as.character(end_date))
Sac_cond_monthly_average<-mean(sac_cond_daily_new$parameter_value, na.rm = T)
Sac_cond_monthly_average
#### ppm conversion
sac_ppm<-(Sac_cond_monthly_average*0.55)
sac_ppm
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
SanJoaquin_cond_daily_new <- cdec_query(station = "VER", sensor_num = "100",
dur_code = "D", start_date = as.character(start_date),
end_date = as.character(end_date))
SanJoaquin_cond_monthly_average<-mean(SanJoaquin_cond_daily_new$parameter_value, na.rm = T)
SanJoaquin_cond_monthly_average
#### ppm conversion
SanJoa_ppm<-(SanJoaquin_cond_monthly_average*0.55)
SanJoa_ppm
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
Banks_cond_daily_new <- cdec_query(station = "HBP", sensor_num = "100",
dur_code = "D", start_date = as.character(start_date),
end_date = as.character(end_date))
#need to take the average of all parameter_value for the date
Banks_cond_monthly_average<-mean(Banks_cond_daily_new$parameter_value, na.rm = T)
Banks_cond_monthly_average
#convert um/cm to ppm
#idea to have some historical context with the salinity?
#### ppm conversion
Banks_ppm<-(Banks_cond_monthly_average*0.55)
Banks_ppm
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
SacClearCreek_waterTemp_new <- cdec_query(station = "IGO", sensor_num = "25",
dur_code = "H", start_date = as.character(start_date),
end_date = as.character(end_date))
#need to take the average of all parameter_value for the date
SacClearCreek_waterTemp_monthly_average<-mean(SacClearCreek_waterTemp_new$parameter_value, na.rm = T)
SacClearCreek_waterTemp_monthly_average
#cdec_datasets("IGO")
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
SacSanJoaquin_waterTemp_new <- cdec_query(station = "CSE", sensor_num = "25",
dur_code = "H", start_date = as.character(start_date),
end_date = as.character(end_date))
#need to take the average of all parameter_value for the date
SacSanJoaquin_waterTemp_monthly_average<-mean(SacSanJoaquin_waterTemp_new$parameter_value, na.rm = T)
SacSanJoaquin_waterTemp_monthly_average
#Water Temp - South Delta (near HBP) at Clifton Court Forebay
cdec_datasets("CLC")
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
SouthDelta_waterTemp_new <- cdec_query(station = "CLC", sensor_num = "146",
dur_code = "H", start_date = as.character(start_date),
end_date = as.character(end_date))
#because CLC temp gage only have readings in Celcius, need to convert to F
SouthDelta_waterTemp_new$parameter_F<-(SouthDelta_waterTemp_new$parameter_value*( 9/5) + 32)
#need to take the average of all parameter_value for the date
SouthDelta_waterTemp_monthly_average_F<-mean(SouthDelta_waterTemp_new$parameter_F, na.rm = T)
SouthDelta_waterTemp_monthly_average_F
knitr::opts_chunk$set(echo = FALSE)
# File path to your Excel file
sacramento_file_path <- "historical_data/historical_data_full.xlsx"
# Determine the current month and year
# %b is the month in short form
# %Y is the year
# Sys.Date() pulls the date from whatever system the program is on
sacramento_current_month <- format(Sys.Date(), "%b")
sacramento_current_year <- format(Sys.Date(), "%Y")
# Load the entire workbook without overwriting other sheets
sacramento_workbook <- loadWorkbook(sacramento_file_path)
rm(list=ls())
#install.packages("rvest")
library(rvest)
#install.packages("pdftools")
library(pdftools)
library(tidyverse)
library(stringr)
#install.packages("rvest")
#install.packages("xml2")
library(rvest)
library(xml2)
#install.packages("devtools")
#devtools::install_github("flowwest/CDECRetrieve")
library(CDECRetrieve)
library(magrittr)
#install.packages("leaflet")
library(leaflet)
#install.packages("writexl")
library(writexl)
#install.packages("readxl")
library(readxl)
#install.packages("lubridate")
library(lubridate)
#install.packages("openxlsx")
library(openxlsx)
library(geojsonio)
# File path to your Excel file
sacramento_file_path <- "historical_data/historical_data_full.xlsx"
# Determine the current month and year
# %b is the month in short form
# %Y is the year
# Sys.Date() pulls the date from whatever system the program is on
sacramento_current_month <- format(Sys.Date(), "%b")
sacramento_current_year <- format(Sys.Date(), "%Y")
# Load the entire workbook without overwriting other sheets
sacramento_workbook <- loadWorkbook(sacramento_file_path)
# Read the specific sheet you want to update
sacramento_historical_data <- readWorkbook(sacramento_workbook, sheet = "Flow_Sac")
sacramento_historical_data$Year <- as.character(sacramento_historical_data$Year) # Ensure Year is character
# Calculate the new value you want to add (e.g., CFS average)
sacramento_start_date <- floor_date(Sys.Date(), "month")
sacramento_end_date <- Sys.Date()
# Assume `sacramento_flow_daily` is generated from CDEC data query
sacramento_current_month_CFS_average <- mean(sacramento_flow_daily$parameter_value, na.rm = TRUE)
# Query CDEC data for San Joaquin at Vernalis (station "VNS") for the current month
# Assuming `cdec_query` returns a data frame with a "parameter_value" column
sacramento_flow_daily <- cdec_query(station = "FPT", sensor_num = 20,
dur_code = "H", start_date = as.character(sacramento_start_date),
end_date = as.character(sacramento_end_date))
# Query CDEC data for San Joaquin at Vernalis (station "VNS") for the current month
# Assuming `cdec_query` returns a data frame with a "parameter_value" column
sacramento_flow_daily <- cdec_query(station = "FPT", sensor_num = 20,
dur_code = "H", start_date = as.character(sacramento_start_date),
end_date = as.character(sacramento_end_date))
# Assume `sacramento_flow_daily` is generated from CDEC data query
sacramento_current_month_CFS_average <- mean(sacramento_flow_daily$parameter_value, na.rm = TRUE)
# Check if there is an entry for the current month and year
existing_entry <- sacramento_historical_data %>%
filter(Month == sacramento_current_month, Year == sacramento_current_year)
if (nrow(existing_entry) > 0) {
# Update the existing row with the new CFS average for the current month
row_to_update <- which(sacramento_historical_data$Month == sacramento_current_month &
sacramento_historical_data$Year == sacramento_current_year)
sacramento_historical_data[row_to_update, "Average_Flow_Daily"] <- sacramento_current_month_CFS_average
} else {
# Create a new row with the current month, year, and average flow if it's a new month
new_row <- data.frame(
Month = sacramento_current_month,
Year = sacramento_current_year,
Average_Flow_Daily = sacramento_current_month_CFS_average
)
# Append the new row to the historical data
sacramento_historical_data <- bind_rows(sacramento_historical_data, new_row)
}
# Write only the modified sheet back to the workbook
writeData(sacramento_workbook, sheet = "Flow_Sac", x = sacramento_historical_data)
# Save the workbook, preserving all other sheets
saveWorkbook(sacramento_workbook, sacramento_file_path, overwrite = TRUE)
message("File updated successfully with current month's data.")
knitr::opts_chunk$set(echo = FALSE)
rm(list=ls())
#install.packages("rvest")
library(rvest)
#install.packages("pdftools")
library(pdftools)
library(tidyverse)
library(stringr)
#install.packages("rvest")
#install.packages("xml2")
library(rvest)
library(xml2)
#install.packages("devtools")
#devtools::install_github("flowwest/CDECRetrieve")
library(CDECRetrieve)
library(magrittr)
#install.packages("leaflet")
library(leaflet)
#install.packages("writexl")
library(writexl)
#install.packages("readxl")
library(readxl)
#install.packages("lubridate")
library(lubridate)
#install.packages("openxlsx")
library(openxlsx)
library(geojsonio)
# File path to your Excel file
sacramento_file_path <- "historical_data/historical_data_full.xlsx"
# Determine the current month and year
# %b is the month in short form
# %Y is the year
# Sys.Date() pulls the date from whatever system the program is on
sacramento_current_month <- format(Sys.Date(), "%b")
sacramento_current_year <- format(Sys.Date(), "%Y")
# Load the entire workbook without overwriting other sheets
sacramento_workbook <- loadWorkbook(sacramento_file_path)
# Read the specific sheet you want to update
sacramento_historical_data <- readWorkbook(sacramento_workbook, sheet = "Flow_Sac")
sacramento_historical_data$Year <- as.character(sacramento_historical_data$Year) # Ensure Year is character
# Calculate the new value you want to add (e.g., CFS average)
sacramento_start_date <- floor_date(Sys.Date(), "month")
sacramento_end_date <- Sys.Date()
# Query CDEC data for San Joaquin at Vernalis (station "VNS") for the current month
# Assuming `cdec_query` returns a data frame with a "parameter_value" column
sacramento_flow_daily <- cdec_query(station = "FPT", sensor_num = 20,
dur_code = "H", start_date = as.character(sacramento_start_date),
end_date = as.character(sacramento_end_date))
# Assume `sacramento_flow_daily` is generated from CDEC data query
sacramento_current_month_CFS_average <- mean(sacramento_flow_daily$parameter_value, na.rm = TRUE)
# Check if there is an entry for the current month and year
existing_entry <- sacramento_historical_data %>%
filter(Month == sacramento_current_month, Year == sacramento_current_year)
if (nrow(existing_entry) > 0) {
# Update the existing row with the new CFS average for the current month
row_to_update <- which(sacramento_historical_data$Month == sacramento_current_month &
sacramento_historical_data$Year == sacramento_current_year)
sacramento_historical_data[row_to_update, "Average_Flow_Daily"] <- sacramento_current_month_CFS_average
} else {
# Create a new row with the current month, year, and average flow if it's a new month
new_row <- data.frame(
Month = sacramento_current_month,
Year = sacramento_current_year,
Average_Flow_Daily = sacramento_current_month_CFS_average
)
# Append the new row to the historical data
sacramento_historical_data <- bind_rows(sacramento_historical_data, new_row)
}
# Write only the modified sheet back to the workbook
writeData(sacramento_workbook, sheet = "Flow_Sac", x = sacramento_historical_data)
# Save the workbook, preserving all other sheets
saveWorkbook(sacramento_workbook, sacramento_file_path, overwrite = TRUE)
message("File updated successfully with current month's data.")
# File path to your Excel file (the one you just uploaded)
san_joaquin_file_path <- "historical_data/historical_data_full.xlsx"
# Determine the current month and year
san_joaquin_current_month <- format(Sys.Date(), "%b")
san_joaquin_current_year <- format(Sys.Date(), "%Y")
# Load the entire workbook without overwriting other sheets
san_joaquin_workbook <- loadWorkbook(san_joaquin_file_path)
# Read the specific sheet you want to update
san_joaquin_historical_data <- readWorkbook(san_joaquin_workbook, sheet = "Flow_SanJoaq")
san_joaquin_historical_data$Year <- as.character(san_joaquin_historical_data$Year) # Ensure Year is character
# Define the start and end dates for the current month
san_joaquin_start_date <- floor_date(Sys.Date(), "month")
san_joaquin_end_date <- Sys.Date()
# Query CDEC data for San Joaquin at Vernalis (station "VNS") for the current month
# Assuming `cdec_query` returns a data frame with a "parameter_value" column
san_joaquin_flow_daily <- cdec_query(station = "VNS", sensor_num = 20,
dur_code = "H", start_date = as.character(san_joaquin_start_date),
end_date = as.character(san_joaquin_end_date))
# Calculate the monthly average for San Joaquin flow
san_joaquin_export_monthly_average <- mean(san_joaquin_flow_daily$parameter_value, na.rm = TRUE)
# Calculate the historical mean for the current month, if available in your data
san_joaquin_current_month_historical_data <- san_joaquin_historical_data %>%
filter(Month == san_joaquin_current_month) %>%
select(Average_Flow_Daily)
san_joaquin_current_month_historical_mean <- mean(san_joaquin_current_month_historical_data$Average_Flow_Daily, na.rm = TRUE)
# Calculate the percentage of the current month’s average relative to the historical average
san_joaquin_percentage_of_cfs_average <- (san_joaquin_export_monthly_average / san_joaquin_current_month_historical_mean) * 100
# Print only the percentage result
message(sprintf("San Joaquin export monthly average is %.2f%% of the historical average for %s",
san_joaquin_percentage_of_cfs_average, san_joaquin_current_month))
# Check if there is an entry for the current month and year
existing_entry <- san_joaquin_historical_data %>%
filter(Month == san_joaquin_current_month, Year == san_joaquin_current_year)
suppressMessages({
if (nrow(existing_entry) > 0) {
# Update the existing row with the new flow average for the current month
row_to_update <- which(san_joaquin_historical_data$Month == san_joaquin_current_month &
san_joaquin_historical_data$Year == san_joaquin_current_year)
san_joaquin_historical_data[row_to_update, "Average_Flow_Daily"] <- san_joaquin_export_monthly_average
} else {
# Create a new row with the current month, year, and flow average if it's a new month
new_row <- data.frame(
Month = san_joaquin_current_month,
Year = san_joaquin_current_year,
Average_Flow_Daily = san_joaquin_export_monthly_average
)
# Append the new row to the historical data
san_joaquin_historical_data <- bind_rows(san_joaquin_historical_data, new_row)
}
# Write only the modified sheet back to the workbook
writeData(san_joaquin_workbook, sheet = "Flow_SanJoaq", x = san_joaquin_historical_data)
# Save the workbook, preserving all other sheets
saveWorkbook(san_joaquin_workbook, san_joaquin_file_path, overwrite = TRUE)
})
# URL of the PDF file
delta_exports_pdf_url <- "https://www.usbr.gov/mp/cvo/vungvari/doutdly.pdf"
# Path to save the downloaded PDF file
delta_exports_pdf_file <- "historical_data/delta_exports.pdf"
# Download the PDF file
download.file(delta_exports_pdf_url, delta_exports_pdf_file, mode = "wb")
# Extract text from the PDF file
delta_exports_pdf_text <- pdf_text(delta_exports_pdf_file)
# Extract the last page's text, where the "Average" row appears
delta_export_last_page_text <- delta_exports_pdf_text[length(delta_exports_pdf_text)]
# Split the text into lines
delta_export_lines <- str_split(delta_export_last_page_text, "\n")[[1]]
# Find the line containing the "Average" row
delta_export_average_line <- delta_export_lines[str_detect(delta_export_lines, "Average")]
# Print the line to verify the content and ensure we're targeting the right row
print(delta_export_average_line)
# Refine the regular expression to match specific numeric values, using longer patterns if possible
delta_export_values <- str_extract_all(delta_export_average_line, "\\b\\d{4,5}\\b")[[1]]  # Look for 4- or 5-digit numbers
# Inspect extracted values to identify the target (in this case, 5259 is expected)
print(delta_export_values)
# Assuming the correct index is known based on inspection, retrieve the value (e.g., 5259)
average_delta_export_value <- as.numeric(delta_export_values[1])  # Adjust the index if necessary
print(average_delta_export_value)
# Excel file path and current date
excel_file_path <- "historical_data/historical_data_full.xlsx"
current_month <- format(Sys.Date(), "%b")
current_year <- format(Sys.Date(), "%Y")
# Load the workbook and the specific sheet
delta_exports_workbook <- loadWorkbook(excel_file_path)
delta_exports_data <- readWorkbook(delta_exports_workbook, sheet = "Total_Delta_Exports")
# Ensure the Year column is character to match with the new data format
delta_exports_data$Year <- as.character(delta_exports_data$Year)
# Check if there's already an entry for the current month and year
existing_entry <- delta_exports_data %>%
filter(Month == current_month, Year == current_year)
if (nrow(existing_entry) > 0) {
# Update the existing row with the new average Delta Exports value
row_to_update <- which(delta_exports_data$Month == current_month &
delta_exports_data$Year == current_year)
delta_exports_data[row_to_update, "Exports"] <- average_delta_export_value
} else {
# Add a new row if it's a new month
new_row <- data.frame(
Month = current_month,
Year = current_year,
Exports = average_delta_export_value
)
# Append the new row
delta_exports_data <- bind_rows(delta_exports_data, new_row)
}
# Write the updated sheet back to the workbook
writeData(delta_exports_workbook, sheet = "Total_Delta_Exports", x = delta_exports_data)
# Save the workbook, preserving all sheets
saveWorkbook(delta_exports_workbook, excel_file_path, overwrite = TRUE)
message("Delta Exports data updated successfully for the current month.")
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
sac_cond_daily_new <- cdec_query(station = "SRH", sensor_num = "100",
dur_code = "D", start_date = as.character(start_date),
end_date = as.character(end_date))
Sac_cond_monthly_average<-mean(sac_cond_daily_new$parameter_value, na.rm = T)
Sac_cond_monthly_average
#### ppm conversion
sac_ppm<-(Sac_cond_monthly_average*0.55)
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
SanJoaquin_cond_daily_new <- cdec_query(station = "VER", sensor_num = "100",
dur_code = "D", start_date = as.character(start_date),
end_date = as.character(end_date))
SanJoaquin_cond_monthly_average<-mean(SanJoaquin_cond_daily_new$parameter_value, na.rm = T)
SanJoaquin_cond_monthly_average
#### ppm conversion
SanJoa_ppm<-(SanJoaquin_cond_monthly_average*0.55)
SanJoa_ppm
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
Banks_cond_daily_new <- cdec_query(station = "HBP", sensor_num = "100",
dur_code = "D", start_date = as.character(start_date),
end_date = as.character(end_date))
#need to take the average of all parameter_value for the date
Banks_cond_monthly_average<-mean(Banks_cond_daily_new$parameter_value, na.rm = T)
Banks_cond_monthly_average
#convert um/cm to ppm
#idea to have some historical context with the salinity?
#### ppm conversion
Banks_ppm<-(Banks_cond_monthly_average*0.55)
Banks_ppm
# URL of the PDF file
delta_exports_pdf_url <- "https://www.usbr.gov/mp/cvo/vungvari/doutdly.pdf"
# Path to save the downloaded PDF file
delta_exports_pdf_file <- "historical_data/delta_exports.pdf"
# Download the PDF file
download.file(delta_exports_pdf_url, delta_exports_pdf_file, mode = "wb")
# Extract text from the PDF file
delta_exports_pdf_text <- pdf_text(delta_exports_pdf_file)
# Extract the last page's text, where the "Average" row appears
delta_export_last_page_text <- delta_exports_pdf_text[length(delta_exports_pdf_text)]
# Split the text into lines
delta_export_lines <- str_split(delta_export_last_page_text, "\n")[[1]]
# Find the line containing the "Average" row
delta_export_average_line <- delta_export_lines[str_detect(delta_export_lines, "Average")]
# Print the line to verify the content and ensure we're targeting the right row
print(delta_export_average_line)
# Refine the regular expression to match specific numeric values, using longer patterns if possible
delta_export_values <- str_extract_all(delta_export_average_line, "\\b\\d{4,5}\\b")[[1]]  # Look for 4- or 5-digit numbers
# Inspect extracted values to identify the target (in this case, 5259 is expected)
print(delta_export_values)
# Assuming the correct index is known based on inspection, retrieve the value (e.g., 5259)
average_delta_export_value <- as.numeric(delta_export_values[1])  # Adjust the index if necessary
print(average_delta_export_value)
# Excel file path and current date
excel_file_path <- "historical_data/historical_data_full.xlsx"
current_month <- format(Sys.Date(), "%b")
current_year <- format(Sys.Date(), "%Y")
# Load the workbook and the specific sheet
delta_exports_workbook <- loadWorkbook(excel_file_path)
delta_exports_data <- readWorkbook(delta_exports_workbook, sheet = "Total_Delta_Exports")
# Ensure the Year column is character to match with the new data format
delta_exports_data$Year <- as.character(delta_exports_data$Year)
# Check if there's already an entry for the current month and year
existing_entry <- delta_exports_data %>%
filter(Month == current_month, Year == current_year)
if (nrow(existing_entry) > 0) {
# Update the existing row with the new average Delta Exports value
row_to_update <- which(delta_exports_data$Month == current_month &
delta_exports_data$Year == current_year)
delta_exports_data[row_to_update, "Exports"] <- average_delta_export_value
} else {
# Add a new row if it's a new month
new_row <- data.frame(
Month = current_month,
Year = current_year,
Exports = average_delta_export_value
)
# Append the new row
delta_exports_data <- bind_rows(delta_exports_data, new_row)
}
# Write the updated sheet back to the workbook
writeData(delta_exports_workbook, sheet = "Total_Delta_Exports", x = delta_exports_data)
# Save the workbook, preserving all sheets
saveWorkbook(delta_exports_workbook, excel_file_path, overwrite = TRUE)
message("Delta Exports data updated successfully for the current month.")
print(average_delta_export_value)
sacramento_current_month_CFS_average
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
sac_cond_daily_new <- cdec_query(station = "SRH", sensor_num = "100",
dur_code = "D", start_date = as.character(start_date),
end_date = as.character(end_date))
Sac_cond_monthly_average<-mean(sac_cond_daily_new$parameter_value, na.rm = T)
Sac_cond_monthly_average
#### ppm conversion
sac_ppm<-(Sac_cond_monthly_average*0.55)
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
SanJoaquin_cond_daily_new <- cdec_query(station = "VER", sensor_num = "100",
dur_code = "D", start_date = as.character(start_date),
end_date = as.character(end_date))
SanJoaquin_cond_monthly_average<-mean(SanJoaquin_cond_daily_new$parameter_value, na.rm = T)
SanJoaquin_cond_monthly_average
#### ppm conversion
SanJoa_ppm<-(SanJoaquin_cond_monthly_average*0.55)
SanJoa_ppm
# Get the first day of the current month
start_date <- floor_date(Sys.Date(), "month")
# Get the current date
end_date <- Sys.Date()
# Query CDEC data from the first of the month to the current date
Banks_cond_daily_new <- cdec_query(station = "HBP", sensor_num = "100",
dur_code = "D", start_date = as.character(start_date),
end_date = as.character(end_date))
#need to take the average of all parameter_value for the date
Banks_cond_monthly_average<-mean(Banks_cond_daily_new$parameter_value, na.rm = T)
Banks_cond_monthly_average
#convert um/cm to ppm
#idea to have some historical context with the salinity?
#### ppm conversion
Banks_ppm<-(Banks_cond_monthly_average*0.55)
Banks_ppm
