{"title":"Whats going on in the Delta Wateshed","markdown":{"yaml":{"title":"Whats going on in the Delta Wateshed"},"headingText":"Read PDF text directly from the URL without saving","containsRefs":false,"markdown":"\n\n------------------------------------------------------------------------\n\n------------------------------------------------------------------------\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE)\n```\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\nrm(list=ls())\n\n\nlibrary(rvest)\n\nlibrary(pdftools)\n\nlibrary(tidyverse)\n\nlibrary(stringr)\n\nlibrary(rvest)\n\nlibrary(xml2)\n\nlibrary(CDECRetrieve)\n\nlibrary(magrittr)\n\nlibrary(leaflet)\n\nlibrary(writexl)\n\nlibrary(readxl)\n\nlibrary(lubridate)\n\nlibrary(openxlsx)\n\nlibrary(geojsonio)\n\n\n```\n\n```{r}\n\nnorthern_pdf_url <- \"https://cdec.water.ca.gov/cgi-progs/products/PLOT_ESI.pdf\"\nnorthern_pdf_text <- pdf_text(northern_pdf_url)\n\n#can print if want to debugg pdf\n#print(northern_pdf_text)\n\n```\n\n# Precipitation\n\n#### Northern Sierra Region Current precipitation {style=\"color: darkblue\"}\n\n```{r}\n\n# Read PDF text directly from the URL\nnorthern_pdf_url <- \"https://cdec.water.ca.gov/cgi-progs/products/PLOT_ESI.pdf\"\nnorthern_pdf_text <- pdf_text(northern_pdf_url)\n\n# Combine all pages into a single string (ensures we search the entire document at once)\ncombined_text <- paste(northern_pdf_text, collapse = \" \")\n\n# Define regex pattern to extract the number next to \"Current:\n#\"regex (regular expression) pattern is a sequence of characters that define a search pattern for text. to extract the number next to \"Current:\"\n\npattern <- \"(?i)Current:\\\\s?(\\\\d{1,4}(\\\\.\\\\d{1,2})?)\"  \n# Explanation:\n# - (?i) -> Case insensitive search:\n# - Current: -> Matches \"Current:\"\n# - \\\\s? -> Matches optional whitespace after the word 'current'\n# - (\\\\d{1,4}(\\\\.\\\\d{1,2})?) -> Captures up to 4 digits (e.g., 12, 1234, or 12.34). Only using 4 digits as it is unlikely to see an average greater than xx.xx inches.\n\n# Extract the first match\n#combined_text → Contains all the extracted text from the PDF as a single string.\n#pattern → The regex pattern we created to find the precipitation value.\n#str_match() → Searches for the first occurrence that matches the pattern and extracts the specific value.\n\nmatch <- str_match(combined_text, pattern)\n\n# Check if a match was found\n#the if statement prevents the code from breaking in case there is no match for 'current precipitation' \nif (!is.na(match[2])) {\n  N_sierra_current_precip <- match[2]\n  cat(paste(N_sierra_current_precip, \"inches\\n\"))\n} else {\n  cat(\"No precipitation data found.\\n\")\n}\n\n\n```\n\nPercent of average rain for this date\n\n```{r}\n# Create an empty vector to store the extracted value\nN_sierra_average_precip <- c()\n\n# Extract text from the PDF file\n#northern_pdf_text <- pdf_text(northern_pdf_file)\n\n# Check if the PDF text is not empty\nif (length(northern_pdf_text) > 0) {\n  # Concatenate all the text into a single string\n  combined_text <- paste(northern_pdf_text, collapse = \" \")\n  \n  # Define the pattern to match the \"Percent of Average for this Date:\" followed by the percentage value\n  pattern <- \"(?i)Percent of Average for this Date:\\\\s*(\\\\d+%)\"\n  \n  # Extract the match using regmatches and regexpr\n  northern_next_four <- regmatches(combined_text, regexpr(pattern, combined_text, perl = TRUE))\n  \n  if (length(northern_next_four) > 0) {\n    # Extract the percentage value using a capturing group\n    percent_value <- sub(\"(?i)Percent of Average for this Date:\\\\s*(\\\\d+%)\", \"\\\\1\", northern_next_four)\n    \n    # Append the value to the vector\n    N_sierra_average_precip <- c(N_sierra_average_precip, percent_value)\n    \n    # Print only the percentage value\n    cat(percent_value, \"\\n\")\n  } else {\n    cat(\"Percent of Average for this Date not found.\\n\")\n  }\n} else {\n  cat(\"No text extracted from the PDF.\\n\")\n}\n\n\n\n```\n\n#### Central Sierra Region Current precipitation {style=\"color: darkblue\"}\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\n\n#Central Sierra precipitation #Pulling and downloading the pdf from online\n#URL of pdf file\n\n\n# URL of the PDF file\ncentral_ppt_pdf_url <- \"https://cdec.water.ca.gov/cgi-progs/products/PLOT_FSI.pdf\"\n\n# Read PDF text directly from the URL\ncentral_pdf_text <- pdf_text(central_ppt_pdf_url)\n\n# Print the extracted text (for debugging)\nprint(central_pdf_text)\n\n\n```\n\n```{r}\n# Create an empty vector\nCentral_current_precip <- c()\n\n# Adjusted pattern for \"Current:\"\nif (length(central_pdf_text) > 0) {\n  for (sentence in central_pdf_text) {\n    # Pattern to match \"Current:\" and capture the 4 characters after it\n    pattern <- \"(?i)Current[:\\\\s]+(.{4})\"\n    \n    # Extract the matched text\n    next_four <- regmatches(sentence, regexpr(pattern, sentence, perl = TRUE))\n    \n    if (length(next_four) > 0) {\n      # Extract only the captured group (the 4 characters) and not \"Current:\"\n      number_only <- sub(pattern, \"\\\\1\", next_four)\n      \n      # Append the value of number_only to the vector\n      Central_current_precip <- c(Central_current_precip, number_only)\n      \n      # Print only the number\n      cat(paste(number_only, \"inches\\n\"))\n    } else {\n      cat(\"Next four characters after 'Current:' not found.\\n\")\n    }\n  }\n} else {\n  cat(\"No text extracted from the PDF.\\n\")\n}\n\n\n```\n\nCentral Sierra Region: Percent of average rain for this date\n\n```{r}\n\n#Central Sierra #PUlling out Percent average\n\n#create an empty vector\nCentral_average_precip <- c()\n\n# Adjusted pattern for \"Percent of Average for this Date:\"\nif (length(central_pdf_text) > 0) {\n  for (sentence in central_pdf_text) {\n    pattern <- \"(?i)Percent of Average for this Date[:\\\\s]+(.{4})\"\n    next_four <- regmatches(sentence, regexpr(pattern, sentence, perl = TRUE))\n    if (length(next_four) > 0) {\n      # Append the value of next_four to the vector\n      Central_average_precip <- c(Central_average_precip, next_four)\n      cat(paste(next_four, \"\\n\"))\n    } else {\n      cat(\"Next four characters after 'Percent of Average for this Date:' not found.\\n\")\n    }\n  }\n} else {\n  cat(\"No text extracted from the PDF.\")\n}\n\n\n\n```\n\n#################################################################################### \n\n# Snow Pack\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\n#URL of pdf file\n\n# ***** need to see if this pdf updates everyday with the same URL *******\nsnow_pack_pdf_url <- \"https://cdec.water.ca.gov/cgi-progs/products/swccond.pdf\"\n\n\n#pathway to where you want the pdf to be saved\n#can eventaully make the name of the pdf with the date it is downloaded\nsnow_pack_pdf_file<-\"data_output/snow_pack.pdf\"\n\n# Download the PDF file\n\n# The \"wb\" mode is typically used when downloading non-text files, such as images, PDFs, or other binary files. It tells R to open the file in binary mode, which is necessary for correctly handling binary data\ndownload.file(snow_pack_pdf_url, snow_pack_pdf_file, mode = \"wb\")\n\n# Extract text from the PDF\nsnow_pack_pdf_text <- pdf_text(snow_pack_pdf_file)\n\n# Print the extracted text\nprint(snow_pack_pdf_text)\n\n\n```\n\n#### Northern Sierra\n\n```{r}\n# Define the pattern to match the line containing \"NORTH\" and the associated percentages\npattern <- \"(?i)NORTH\\\\s{2,}(\\\\d+%).*?(\\\\d+%)\"\n\n# Extract the \"NORTH\" section\nnorth_match <- regmatches(snow_pack_pdf_text, regexec(pattern, snow_pack_pdf_text, perl = TRUE))\n\n# Check if the \"NORTH\" section is found\nif (length(north_match) > 0) {\n  # Extract both percentages from the matched text\n  north_percentages <- regmatches(north_match[[1]], gregexpr(\"\\\\d+%\", north_match[[1]]))[[1]]\n  \n  # Print the extracted percentage\n  if (length(north_percentages) >= 2) {\n    cat(paste(\"Northern CA:\", north_percentages[2], \"of percent avgerage to date snow pack\"))\n  } else {\n    cat(\"Second percentage in the 'NORTH' section not found.\")\n  }\n} else {\n  cat(\"NORTH section not found.\")\n}\n\n```\n\n```{r}\n\n# Define the pattern to match the line containing the snow water equivalent information\npattern <- \"(?i)Average snow water equivalent \\\\(Inches\\\\)\\\\s+(\\\\d+\\\\.\\\\d+)\"\n\n# Extract the line containing snow water equivalent information\nsnow_water_line <- regmatches(snow_pack_pdf_text, regexpr(pattern, snow_pack_pdf_text, perl = TRUE))\n\n# Check if the line is found\nif (length(snow_water_line) > 0) {\n  # Extract the numeric value\n  numeric_value <- sub(\"(?i)Average snow water equivalent \\\\(Inches\\\\)\\\\s+(\\\\d+\\\\.\\\\d+)\", \"\\\\1\", snow_water_line)\n  \n  # Create the modified line with \"inches\" after the numeric value\n  modified_snow_water_line <- paste(\"average snow water equivalent\", numeric_value, \"inches\")\n  \n  cat(\"Northern Sierra\", modified_snow_water_line, \"\\n\")\n} else {\n  cat(\"Snow water equivalent information not found.\\n\")\n}\n\n\n```\n\n#### Central Sierra\n\n```{r}\n# Define the pattern to match the line containing \"NORTH\" and the associated percentages\npattern <- \"(?i)CENTRAL SIERRA\\\\s{2,}(\\\\d+%).*?(\\\\d+%)\"\n\n# Extract the \"CENTRAL SIERRA\" section\ncentral_match <- regmatches(snow_pack_pdf_text, regexec(pattern, snow_pack_pdf_text, perl = TRUE))\n\n# Check if the \"CENTRAL SIERRA\" section is found\nif (length(central_match) > 0) {\n  # Extract both percentages from the matched text\n  central_percentages <- regmatches(central_match[[1]], gregexpr(\"\\\\d+%\", central_match[[1]]))[[1]]\n  \n  # Print the extracted percentage\n  if (length(central_percentages) >= 2) {\n    cat(paste(\"CENTRAL SIERRA\", central_percentages[2], \"of percent avg. to date snow pack\"))\n  } else {\n    cat(\"Second percentage in the 'CENTRAL SIERRA' section not found.\")\n  }\n} else {\n  cat(\"CENTRAL SIERRA section not found.\")\n}\n\n\n```\n\n```{r}\n\n\n# Find the position of \"Central Sierra\" in the text\ncentral_sierra_position <- regexpr(\"(?i)Central Sierra\", snow_pack_pdf_text)\n\n# If \"Central Sierra\" is found, find the position of \"Average snow water equivalent (Inches)\" after it\nif (central_sierra_position > 0) {\n  # Get the substring starting from the position of \"Central Sierra\"\n  substring_after_central <- substring(snow_pack_pdf_text, central_sierra_position)\n  \n  # Find the position of \"Average snow water equivalent (Inches)\" within the substring\n  snow_water_position <- regexpr(\"(?i)Average snow water equivalent \\\\(Inches\\\\)\", substring_after_central)\n  \n  # If \"Average snow water equivalent (Inches)\" is found, extract the numeric value following it\n  if (snow_water_position > 0) {\n    # Get the substring starting from the position of \"Average snow water equivalent (Inches)\"\n    snow_water_substring <- substring(substring_after_central, snow_water_position)\n    \n    # Extract the numeric value following \"Average snow water equivalent (Inches)\"\n    snow_water_value <- regmatches(snow_water_substring, regexpr(\"\\\\d+\\\\.\\\\d+\", snow_water_substring))\n    \n    # If a numeric value is found, print it with the desired text\n    if (length(snow_water_value) > 0) {\n      cat(paste(\"Central snow water equivalent\", snow_water_value))\n    } else {\n      cat(\"Snow water equivalent value not found.\")\n    }\n  } else {\n    cat(\"Average snow water equivalent information not found for Central Sierra.\")\n  }\n} else {\n  cat(\"Central Sierra information not found.\")\n}\n\n\n```\n\n#### State-wide\n\n```{r}\n\n# Find the position of \"State\" in the text\nstate_position <- regexpr(\"(?i)State\", snow_pack_pdf_text)\n\n# If \"State\" is found, find the position of the numeric value after it\nif (state_position > 0) {\n  # Get the substring starting from the position of \"State\"\n  substring_after_state <- substring(snow_pack_pdf_text, state_position)\n  \n  # Extract the numeric value following \"State\"\n  snow_water_value <- regmatches(substring_after_state, regexpr(\"\\\\d+\\\\.\\\\d+\", substring_after_state))\n  \n  # If a numeric value is found, print it with the desired text\n  if (length(snow_water_value) > 0) {\n    cat(paste(\"State wide average snow pack\", snow_water_value))\n  } else {\n    cat(\"Snow water equivalent value not found.\")\n  }\n} else {\n  cat(\"State information not found.\")\n}\n\n\n```\n\n```{r}\n\n# Find the position of \"Statewide Average:\" in the text\nstatewide_position <- regexpr(\"(?i)Statewide Average:\", snow_pack_pdf_text)\n\n# If \"Statewide Average:\" is found, find the position of the numeric value after it\nif (statewide_position > 0) {\n  # Get the substring starting from the position of \"Statewide Average:\"\n  substring_after_statewide <- substring(snow_pack_pdf_text, statewide_position)\n  \n  # Extract both percentages from the matched text\n  statewide_percentages <- regmatches(substring_after_statewide, gregexpr(\"\\\\d+%\", substring_after_statewide))[[1]]\n  \n  # Print the second percentage with the desired text\n  if (length(statewide_percentages) >= 2) {\n    cat(\"Statewide average percent snow pack for this date\", statewide_percentages[2], \"\\n\")\n  } else {\n    cat(\"Second percentage after 'Statewide Average:' not found.\")\n  }\n} else {\n  cat(\"Statewide Average information not found.\\n\")\n}\n\n\n\n```\n\n# Reservoir Storage\n\n```{r}\nfile.exists(\"geo_files/legal_delta.geojson\")\n# Load the Legal Delta boundary (replace with your actual file path)\nlegal_delta_boundary <- geojson_read(\"geo_files/legal_delta.geojson\", what = \"sp\")\n\n# Create the map with Legal Delta boundary and specific points\nleaflet() %>%\n  addTiles() %>%\n  setView(lng = -121.5, lat = 38.05, zoom = 7) %>%  # Center the map\n\n  # Add the Legal Delta boundary polygon\n  addPolygons(data = legal_delta_boundary, color = \"blue\", weight = 2, fillOpacity = 0.5, popup = \"Legal Delta Boundary\") %>%\n  \n  # Add specific points of interest as markers\n  addMarkers(lng = -121.493000, lat = 39.540000, popup = \"Oroville Reservoir\") %>%  # Oroville reservoir (ORO)\n  addMarkers(lng = \t-119.302000, lat = \t37.145000, popup = \"Shasta Reservoir\") %>%    # Shasta reservoir (SHA)\n  addMarkers(lng = -121.133000, lat = 37.033000, popup = \"San Luis Reservoir\")   # San Luis reservoir (SNL)\n\n\n\n```\n\n##### shaded area on map is the legal delta\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\n\n# URL of the website to scrape\nreservoir_url <- \"https://cdec.water.ca.gov/reportapp/javareports?name=RES\"\n\n# Read the web page\nreservoir_web_page <- read_html(reservoir_url)\n\n# Extract the table node\nreservoir_table_node <- html_node(reservoir_web_page, \"table\")\n\n# Extract the table content into a data frame\nreservoir_table_data <- html_table(reservoir_table_node)\n\n# Print the entire table data\nprint(reservoir_table_data)\n\n```\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\n# Extract a specific numbers [row, column]\n# Shasta (at Sacramento River)\n\n# extract percent of average storage\nshasta_percent_average_storage_value <- as.numeric(reservoir_table_data[10, 9])\n\n# extract percent of capacity\nshasta_percent_capacity_value <- as.numeric(reservoir_table_data[10, 7])\n\n\n# Print the formatted output with a Markdown header\ncat(sprintf(\" Shasta Reservoir: %.0f%% of average storage, %.0f%% of total capacity.\\n\", \n    shasta_percent_average_storage_value, shasta_percent_capacity_value))\n\n\n```\n\n### Shasta Reservoir: `r shasta_percent_average_storage_value`% of average storage, `r shasta_percent_capacity_value`% of total capacity.\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\n# Extract a specific numbers [row, column]\n# Oroville (at Feather River)\n\n# extract percent of average storage\noroville_percent_average_storage_value <- as.numeric(reservoir_table_data[13, 9])\n\n# extract percent of capacity\noroville_percent_capacity_value <- as.numeric(reservoir_table_data[13, 7])\n\n# Print the formatted output (but this will be hidden)\ncat(sprintf(\" Oroville Reservoir: %.0f%% of average storage, %.0f%% of total capacity.\\n\", \n    oroville_percent_average_storage_value, oroville_percent_capacity_value))\n\n```\n\n### Oroville Reservoir: `r oroville_percent_average_storage_value`% of average storage, `r oroville_percent_capacity_value`% of total capacity.\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\n\n# Extract a specific numbers [row, column]\n# San Luis (at San Luis Creek)\n\n# extract percent of average storage\nSanLuis_percent_average_storage_value <- as.numeric(reservoir_table_data[56, 9])\n\n# extract percent of capacity\nSanLuis_percent_capacity_value <- as.numeric(reservoir_table_data[56, 7])\n\n# Print the formatted output (but this will be hidden)\ncat(sprintf(\" San Luis Reservoir: %.0f%% of average storage, %.0f%% of total capacity.\\n\", \n    SanLuis_percent_average_storage_value, SanLuis_percent_capacity_value))\n\n```\n\n### San Luis Reservoir: `r SanLuis_percent_average_storage_value`% of average storage, `r SanLuis_percent_capacity_value`% of total capacity.\n\n# Water Flow and Quality\n\n#### Location of flow sensors. Shaded region is legal delta\n\n```{r}\n#map of water flow sensors\n\n# Create the map with Legal Delta boundary and specific points\nleaflet() %>%\n  addTiles() %>%\n  setView(lng = -121.5, lat = 38.05, zoom = 8) %>%\n  \n  addPolygons(data = legal_delta_boundary, color = \"blue\", weight = 2, fillOpacity = 0.5, popup = \"Legal Delta Boundary\") %>%\n  \n  addMarkers(lng = -121.27, lat = 37.68, popup = \"San Joaquin River near Vernalis\") %>% # Add specific gps points\n  addMarkers(lng = -121.7, lat = 38.45, popup = \"Sacramento at Freeport\") %>%          # Add specific gps points\n  addMarkers(lng = -121.3, lat = 37.9, popup = \"Central Valley Project and State Water Project pumping station\")   # Center the map\n\n\n\n             \n\n\n```\n\n#### Sacramento River at Freeport\n\n```{r}\n\n\n# File path to your Excel file\nsacramento_file_path <- \"historical_data/historical_data_full.xlsx\"\n\n# Determine the current month and year\nsacramento_current_month <- format(Sys.Date(), \"%B\")\nsacramento_current_year <- format(Sys.Date(), \"%Y\")\n\n# Load the entire workbook without overwriting other sheets\nsacramento_workbook <- loadWorkbook(sacramento_file_path)\n\n# Read the specific sheet you want to update\nsacramento_historical_data <- readWorkbook(sacramento_workbook, sheet = \"Flow_Sac\")\nsacramento_historical_data$Year <- as.character(sacramento_historical_data$Year) # Ensure Year is character\n\n# Define the start and end dates for the current month\nsacramento_start_date <- floor_date(Sys.Date(), \"month\")\nsacramento_end_date <- Sys.Date()\n\n# Query CDEC data for Sacramento at Freeport (station \"FPT\") for the current month\nsacramento_flow_daily <- cdec_query(station = \"FPT\", sensor_num = 20, \n                                    dur_code = \"H\", start_date = as.character(sacramento_start_date), \n                                    end_date = as.character(sacramento_end_date))\n\n# Calculate the monthly average for Sacramento flow\nsacramento_export_monthly_average <- mean(sacramento_flow_daily$parameter_value, na.rm = TRUE)\n\n# Calculate the historical mean for the current month, if available in your data\nsacramento_current_month_historical_data <- sacramento_historical_data %>%\n  filter(Month == sacramento_current_month) %>%\n  select(Average_Flow_Daily)\n\nsacramento_current_month_historical_mean <- mean(sacramento_current_month_historical_data$Average_Flow_Daily, na.rm = TRUE)\n\n# Calculate the percentage of the current month’s average relative to the historical average\nsacramento_percentage_of_cfs_average <- (sacramento_export_monthly_average / sacramento_current_month_historical_mean) * 100\n\n# Print only the percentage result\nmessage(sprintf(\"Sacramento export monthly average is %.2f%% of the historical average for %s.\\nThe average CFS for %s %s is %.2f.\\n \", \n                sacramento_percentage_of_cfs_average, \n                sacramento_current_month,\n                sacramento_current_month,\n                sacramento_current_year,\n                sacramento_export_monthly_average))\n\n\n\n# Check if there is an entry for the current month and year\nexisting_entry <- sacramento_historical_data %>%\n  filter(Month == sacramento_current_month, Year == sacramento_current_year)\n\nsuppressMessages({\n  if (nrow(existing_entry) > 0) {\n    # Update the existing row with the new flow average for the current month\n    row_to_update <- which(sacramento_historical_data$Month == sacramento_current_month & \n                           sacramento_historical_data$Year == sacramento_current_year)\n    sacramento_historical_data[row_to_update, \"Average_Flow_Daily\"] <- sacramento_export_monthly_average\n  } else {\n    # Create a new row with the current month, year, and flow average if it's a new month\n    new_row <- data.frame(\n      Month = sacramento_current_month,\n      Year = sacramento_current_year,\n      Average_Flow_Daily = sacramento_export_monthly_average\n    )\n    \n    # Append the new row to the historical data\n    sacramento_historical_data <- bind_rows(sacramento_historical_data, new_row)\n  }\n  \n  # Write only the modified sheet back to the workbook\n  writeData(sacramento_workbook, sheet = \"Flow_Sac\", x = sacramento_historical_data)\n  \n  # Save the workbook, preserving all other sheets\n  saveWorkbook(sacramento_workbook, sacramento_file_path, overwrite = TRUE)\n})\n\n\n\n```\n\n```{r}\n\n#Sacramento River at Hood (station code SRH) #When run, will automatically update for current month\n\ncurrent_month <- format(Sys.Date(), \"%B\")\n\n# Get the first day of the current month\nstart_date <- floor_date(Sys.Date(), \"month\")\n\n# Get the current date\nend_date <- Sys.Date()\n\n# Query CDEC data from the first of the month to the current date\nsac_cond_daily_new <- cdec_query(station = \"SRH\", sensor_num = \"100\", \n                             dur_code = \"D\", start_date = as.character(start_date), \n                             end_date = as.character(end_date))\nSac_cond_monthly_average<-mean(sac_cond_daily_new$parameter_value, na.rm = T)\n\n\n#### ppm conversion\nsac_ppm<-(Sac_cond_monthly_average*0.55)\n\n\n\n#output\nmessage(sprintf(\"Average monthly salinity for %s is %.2f µS/cm and %.2f ppm\",\n                current_month, Sac_cond_monthly_average, sac_ppm))\n\n```\n\n#### San Joaquin River at Vernalis\n\n```{r}\n\n# File path to your Excel file (the one you just uploaded)\nsan_joaquin_file_path <- \"historical_data/historical_data_full.xlsx\"\n\n# Determine the current month and year\nsan_joaquin_current_month <- format(Sys.Date(), \"%B\")\nsan_joaquin_current_year <- format(Sys.Date(), \"%Y\")\n\n# Load the entire workbook without overwriting other sheets\nsan_joaquin_workbook <- loadWorkbook(san_joaquin_file_path)\n\n# Read the specific sheet you want to update\nsan_joaquin_historical_data <- readWorkbook(san_joaquin_workbook, sheet = \"Flow_SanJoaq\")\nsan_joaquin_historical_data$Year <- as.character(san_joaquin_historical_data$Year) # Ensure Year is character\n\n# Define the start and end dates for the current month\nsan_joaquin_start_date <- floor_date(Sys.Date(), \"month\")\nsan_joaquin_end_date <- Sys.Date()\n\n# Query CDEC data for San Joaquin at Vernalis (station \"VNS\") for the current month\n# Assuming `cdec_query` returns a data frame with a \"parameter_value\" column\nsan_joaquin_flow_daily <- cdec_query(station = \"VNS\", sensor_num = 20, \n                                     dur_code = \"H\", start_date = as.character(san_joaquin_start_date), \n                                     end_date = as.character(san_joaquin_end_date))\n\n# Calculate the monthly average for San Joaquin flow\nsan_joaquin_export_monthly_average <- mean(san_joaquin_flow_daily$parameter_value, na.rm = TRUE)\n\n# Calculate the historical mean for the current month, if available in your data\nsan_joaquin_current_month_historical_data <- san_joaquin_historical_data %>%\n  filter(Month == san_joaquin_current_month) %>%\n  select(Average_Flow_Daily)\n\nsan_joaquin_current_month_historical_mean <- mean(san_joaquin_current_month_historical_data$Average_Flow_Daily, na.rm = TRUE)\n\n# Calculate the percentage of the current month’s average relative to the historical average\nsan_joaquin_percentage_of_cfs_average <- (san_joaquin_export_monthly_average / san_joaquin_current_month_historical_mean) * 100\n\n# Print only the percentage result\nmessage(sprintf(\"San Joaquin export monthly average is %.2f%% of the historical average for %s.\\nThe average CFS for %s %s is %.2f.\\n\", \n                san_joaquin_percentage_of_cfs_average, \n                san_joaquin_current_month,\n                san_joaquin_current_month,\n                san_joaquin_current_year,\n                san_joaquin_export_monthly_average))\n\n\n\n\n# Check if there is an entry for the current month and year\nexisting_entry <- san_joaquin_historical_data %>%\n  filter(Month == san_joaquin_current_month, Year == san_joaquin_current_year)\n\nsuppressMessages({\n  if (nrow(existing_entry) > 0) {\n    # Update the existing row with the new flow average for the current month\n    row_to_update <- which(san_joaquin_historical_data$Month == san_joaquin_current_month & \n                           san_joaquin_historical_data$Year == san_joaquin_current_year)\n    san_joaquin_historical_data[row_to_update, \"Average_Flow_Daily\"] <- san_joaquin_export_monthly_average\n  } else {\n    # Create a new row with the current month, year, and flow average if it's a new month\n    new_row <- data.frame(\n      Month = san_joaquin_current_month,\n      Year = san_joaquin_current_year,\n      Average_Flow_Daily = san_joaquin_export_monthly_average\n    )\n    \n    # Append the new row to the historical data\n    san_joaquin_historical_data <- bind_rows(san_joaquin_historical_data, new_row)\n  }\n  \n  # Write only the modified sheet back to the workbook\n  writeData(san_joaquin_workbook, sheet = \"Flow_SanJoaq\", x = san_joaquin_historical_data)\n  \n  # Save the workbook, preserving all other sheets\n  saveWorkbook(san_joaquin_workbook, san_joaquin_file_path, overwrite = TRUE)\n})\n\n\n\n```\n\n```{r}\n\n#San Joaquin River at Vernalis (station code - VER) #When run, will automatically update for current month\n\n# Get the first day of the current month\nstart_date <- floor_date(Sys.Date(), \"month\")\n\n# Get the current date\nend_date <- Sys.Date()\n\n# Query CDEC data from the first of the month to the current date\nSanJoaquin_cond_daily_new <- cdec_query(station = \"VER\", sensor_num = \"100\", \n                             dur_code = \"D\", start_date = as.character(start_date), \n                             end_date = as.character(end_date))\n\n\nSanJoaquin_cond_monthly_average<-mean(SanJoaquin_cond_daily_new$parameter_value, na.rm = T)\n\n\n#### ppm conversion\nSanJoa_ppm<-(SanJoaquin_cond_monthly_average*0.55)\n\n\n#output\nmessage(sprintf(\"Average monthly salinity for  %s is %.2f µS/cm and %.2f ppm\",\n                current_month, SanJoaquin_cond_monthly_average, SanJoa_ppm))\n\n```\n\n#### Total Delta Exports: (Central Valley Project + State Water Project):\n\nThis is a monthly average of exports through: Clifton Court (CLT), Tracy (TRA), Contra Costa (CCC), and Byron Bethany (BBID)\n\n```{r}\n\n# URL of the PDF file\ndelta_exports_pdf_url <- \"https://www.usbr.gov/mp/cvo/vungvari/doutdly.pdf\"\n\n# Path to save the downloaded PDF file\ndelta_exports_pdf_file <- \"historical_data/delta_exports.pdf\"\n\n# Download the PDF file\ndownload.file(delta_exports_pdf_url, delta_exports_pdf_file, mode = \"wb\")\n\n# Extract text from the PDF file\ndelta_exports_pdf_text <- pdf_text(delta_exports_pdf_file)\n\n# Extract the last page's text\ndelta_export_last_page_text <- delta_exports_pdf_text[length(delta_exports_pdf_text)]\n\n# Split the text into lines\ndelta_export_lines <- str_split(delta_export_last_page_text, \"\\\\n\")[[1]]\n\n# Find the line containing the \"Average\" row\ndelta_export_average_line <- delta_export_lines[str_detect(delta_export_lines, \"Average\")]\n\n# Define delta_export_numbers before use\ndelta_export_numbers <- str_split(delta_export_average_line, \"\\\\s+\")[[1]]\n\n# Print extracted elements for debugging\n#print(delta_export_numbers)\n\n# Extract numeric values\nnumeric_values <- delta_export_numbers[str_detect(delta_export_numbers, \"^\\\\d{1,5}[,\\\\.]?\\\\d*$\")]\n\n# Print numeric values for debugging\n#print(numeric_values)\n\n# Extract the 17th numeric value\n\n#sometimes the number (length(numeric_values) >= 15) needs to be changed \n\nif (length(numeric_values) >= 15) {\n    average_delta_export_value <- as.numeric(gsub(\",\", \"\", numeric_values[15]))\n} else {\n    warning(\"Could not find the 14th numeric value. Check the PDF format.\")\n    average_delta_export_value <- NA\n}\n\n# Print the final extracted value\n#print(average_delta_export_value)\n\n# Excel file path and current date\ndelta_export_file_path <- \"historical_data/historical_data_full.xlsx\"\ncurrent_month <- format(Sys.Date(), \"%B\")\ncurrent_year <- format(Sys.Date(), \"%Y\")\n\n# Load workbook and sheet\ndelta_exports_workbook <- loadWorkbook(delta_export_file_path)\ndelta_exports_data <- readWorkbook(delta_exports_workbook, sheet = \"Total_Delta_Exports\")\n\ndelta_exports_data$Year <- as.character(delta_exports_data$Year)\n\n# Check for existing entry\nexisting_entry <- delta_exports_data %>%\n  filter(Month == current_month, Year == current_year)\n\nif (nrow(existing_entry) > 0) {\n  row_to_update <- which(delta_exports_data$Month == current_month &\n                         delta_exports_data$Year == current_year)\n  delta_exports_data[row_to_update, \"Exports\"] <- average_delta_export_value\n} else {\n  new_row <- data.frame(\n    Month = current_month,\n    Year = current_year,\n    Exports = average_delta_export_value\n  )\n  delta_exports_data <- bind_rows(delta_exports_data, new_row)\n}\n\n# Write updated sheet back to the workbook\nwriteData(delta_exports_workbook, sheet = \"Total_Delta_Exports\", x = delta_exports_data)\n\n# Save the workbook\nsaveWorkbook(delta_exports_workbook, delta_export_file_path, overwrite = TRUE)\n\n####################\n\n# Determine the current month and year\ndelta_export_current_month <- format(Sys.Date(), \"%B\")\ndelta_export_current_year <- format(Sys.Date(), \"%Y\")\n\n# Load the entire workbook without overwriting other sheets\ndelta_export_workbook <- loadWorkbook(delta_export_file_path)\n\n# Read the specific sheet you want to update\ndelta_export_historical_data <- readWorkbook(delta_export_workbook, sheet = \"Total_Delta_Exports\")\ndelta_export_historical_data$Year <- as.character(delta_export_historical_data$Year) # Ensure Year is character\n\n# Calculate the historical mean for the current month, if available in your data\ndelta_export_current_month_historical_data <- delta_export_historical_data %>%\n  filter(Month == delta_export_current_month) %>%\n  select(Exports)\n\n\ndelta_export_current_month_historical_mean <- mean(delta_export_current_month_historical_data$Exports, na.rm = TRUE)\n#delta_export_current_month_historical_mean\n\n\n# Calculate the percentage of the current month’s average relative to the historical average\ndelta_export_percentage_of_cfs_average <- (average_delta_export_value / delta_export_current_month_historical_mean) * 100\n#delta_export_percentage_of_cfs_average\n\n\n#.2f specifies 2 digits after the decimal place, and f stands for floating point number - meaning the decimal point will be placed whereever it is needed\n\nmessage(sprintf(\"Total Delta export (CVP + SWP) monthly average is %.2f%% of the historical average for %s.\\nThe average CFS for %s %s is %.2f.\\n\",\n                delta_export_percentage_of_cfs_average,\n                delta_export_current_month,\n                delta_export_current_month,\n                delta_export_current_year,\n                average_delta_export_value))\n\n\n```\n\n```{r}\n#Salinity at Banks pumping plant (station code - HBP) #When run, will automatically update for current month\n\n# Get the first day of the current month\nstart_date <- floor_date(Sys.Date(), \"month\")\n\n# Get the current date\nend_date <- Sys.Date()\n\n\n#### this sensor is not online at the moment\n# Query CDEC data from the first of the month to the current date\nBanks_cond_daily_new <- cdec_query(station = \"HBP\", sensor_num = \"100\", \n                             dur_code = \"D\", start_date = as.character(start_date), \n                             end_date = as.character(end_date))\n\n\n\n#need to take the average of all parameter_value for the date \nBanks_cond_monthly_average<-mean(Banks_cond_daily_new$parameter_value, na.rm = T)\n\n\n\n#convert um/cm to ppm\n#idea to have some historical context with the salinity?\n#### ppm conversion\nBanks_ppm<-(Banks_cond_monthly_average*0.55)\n\n\n\nmessage(sprintf(\"Average monthly salinity for combined CVP + SWP %s is %.2f µS/cm and %.2f ppm\",\n                current_month, Banks_cond_monthly_average, Banks_ppm))\n\n\n```\n\n# TEMPERATURE\n\n#need to add hisotrical average data in --\\> will add to csv file eventually\n\n```{r}\n\n#Water Temp - Sacramento river headwaters at Clear Creek\n\n# Get the first day of the current month\nstart_date <- floor_date(Sys.Date(), \"month\")\n\n# Get the current date\nend_date <- Sys.Date()\n\n# Query CDEC data from the first of the month to the current date\nSacClearCreek_waterTemp_new <- cdec_query(station = \"IGO\", sensor_num = \"25\", \n                             dur_code = \"H\", start_date = as.character(start_date), \n                             end_date = as.character(end_date))\n\n\n\n#need to take the average of all parameter_value for the date \nSacClearCreek_waterTemp_monthly_average<-mean(SacClearCreek_waterTemp_new$parameter_value, na.rm = T)\nSacClearCreek_waterTemp_monthly_average\n\n\n\n#cdec_datasets(\"IGO\")\n\n\n\n\n#### write river temp into workbook\n\n# Excel file path and current date\nClearCreek_file_path <- \"historical_data/historical_data_full.xlsx\"\ncurrent_month <- format(Sys.Date(), \"%B\")\ncurrent_year <- format(Sys.Date(), \"%Y\")\n\n# Load workbook and sheet\nClearCreek_workbook <- loadWorkbook(ClearCreek_file_path)\nClearCreek_data <- readWorkbook(ClearCreek_workbook, sheet = \"Temp_IGO\")\n\nClearCreek_data$Year <- as.character(ClearCreek_data$Year)\n\n# Check for existing entry\nexisting_entry <- ClearCreek_data %>%\n  filter(Month == current_month, Year == current_year)\n\nif (nrow(existing_entry) > 0) {\n  row_to_update <- which(ClearCreek_data$Month == current_month &\n                         ClearCreek_data$Year == current_year)\n  ClearCreek_data[row_to_update, \"Average_Temp_Monthly\"] <- SacClearCreek_waterTemp_monthly_average\n} else {\n  new_row <- data.frame(\n    Month = current_month,\n    Year = current_year,\n    Average_Temp_Monthly = SacClearCreek_waterTemp_monthly_average\n  )\n  ClearCreek_data <- bind_rows(ClearCreek_data, new_row)\n}\n\n# Write updated sheet back to the workbook\nwriteData(ClearCreek_workbook, sheet = \"Temp_IGO\", x = ClearCreek_data)\n\n# Save the workbook\nsaveWorkbook(ClearCreek_workbook, ClearCreek_file_path, overwrite = TRUE)\n\n##### make it print the monthly average for that month for a 20 year average (i think its actually 15 for these)\n######################\n\n# Determine the current month and year\nClearCreek_current_month <- format(Sys.Date(), \"%B\")\nClearCreek_current_year <- format(Sys.Date(), \"%Y\")\n\n# Load the entire workbook without overwriting other sheets\nClearCreek_workbook <- loadWorkbook(ClearCreek_file_path)\n\n# Read the specific sheet you want to update\nClearCreek_historical_data <- readWorkbook(ClearCreek_workbook, sheet = \"Temp_IGO\")\nClearCreek_historical_data$Year <- as.character(ClearCreek_historical_data$Year) # Ensure Year is character\n\n# Calculate the historical mean for the current month, if available in your data\nClearCreek_current_month_historical_data <- ClearCreek_historical_data %>%\n  filter(Month == ClearCreek_current_month) %>%\n  select(Average_Temp_Monthly)\n\n\nClearCreek_current_month_historical_mean <- mean(ClearCreek_current_month_historical_data$Average_Temp_Monthly, na.rm = TRUE)\n#delta_export_current_month_historical_mean\nClearCreek_current_month_historical_mean\n\n\n\nmessage(sprintf(\"Average monthly water temperature for Clear Creek in %s is %.2f °F\\nand the historical average for %s is %.2f °F\",\n                ClearCreek_current_month, SacClearCreek_waterTemp_monthly_average, \n                ClearCreek_current_month,\n                ClearCreek_current_month_historical_mean))\n\n\n```\n\n```{r}\n#Water Temp - Sacramento/San Joaquin Rivers confluence at Collinsville\n\n# Get the first day of the current month\nstart_date <- floor_date(Sys.Date(), \"month\")\n\n# Get the current date\nend_date <- Sys.Date()\n\n# Query CDEC data from the first of the month to the current date\nSacSanJoaquin_waterTemp_new <- cdec_query(station = \"CSE\", sensor_num = \"25\", \n                             dur_code = \"H\", start_date = as.character(start_date), \n                             end_date = as.character(end_date))\n\n\n\n#need to take the average of all parameter_value for the date \nSacSanJoaquin_waterTemp_monthly_average<-mean(SacSanJoaquin_waterTemp_new$parameter_value, na.rm = T)\nSacSanJoaquin_waterTemp_monthly_average\n\n\n```\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\n\n#Water Temp - South Delta (near HBP) at Clifton Court Forebay\n\n\n#cdec_datasets(\"CLC\")\n\n# Get the first day of the current month\nstart_date <- floor_date(Sys.Date(), \"month\")\n\n# Get the current date\nend_date <- Sys.Date()\n\n# Query CDEC data from the first of the month to the current date\nSouthDelta_waterTemp_new <- cdec_query(station = \"CLC\", sensor_num = \"146\", \n                             dur_code = \"H\", start_date = as.character(start_date), \n                             end_date = as.character(end_date))\n\n\n\n#because CLC temp gage only have readings in Celcius, need to convert to F\n\nSouthDelta_waterTemp_new$parameter_F<-(SouthDelta_waterTemp_new$parameter_value*( 9/5) + 32)\n\n\n#need to take the average of all parameter_value for the date \nSouthDelta_waterTemp_monthly_average_F<-mean(SouthDelta_waterTemp_new$parameter_F, na.rm = T)\nSouthDelta_waterTemp_monthly_average_F\n\n```\n","srcMarkdownNoYaml":"\n\n------------------------------------------------------------------------\n\n------------------------------------------------------------------------\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE)\n```\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\nrm(list=ls())\n\n\nlibrary(rvest)\n\nlibrary(pdftools)\n\nlibrary(tidyverse)\n\nlibrary(stringr)\n\nlibrary(rvest)\n\nlibrary(xml2)\n\nlibrary(CDECRetrieve)\n\nlibrary(magrittr)\n\nlibrary(leaflet)\n\nlibrary(writexl)\n\nlibrary(readxl)\n\nlibrary(lubridate)\n\nlibrary(openxlsx)\n\nlibrary(geojsonio)\n\n\n```\n\n```{r}\n\n# Read PDF text directly from the URL without saving\nnorthern_pdf_url <- \"https://cdec.water.ca.gov/cgi-progs/products/PLOT_ESI.pdf\"\nnorthern_pdf_text <- pdf_text(northern_pdf_url)\n\n#can print if want to debugg pdf\n#print(northern_pdf_text)\n\n```\n\n# Precipitation\n\n#### Northern Sierra Region Current precipitation {style=\"color: darkblue\"}\n\n```{r}\n\n# Read PDF text directly from the URL\nnorthern_pdf_url <- \"https://cdec.water.ca.gov/cgi-progs/products/PLOT_ESI.pdf\"\nnorthern_pdf_text <- pdf_text(northern_pdf_url)\n\n# Combine all pages into a single string (ensures we search the entire document at once)\ncombined_text <- paste(northern_pdf_text, collapse = \" \")\n\n# Define regex pattern to extract the number next to \"Current:\n#\"regex (regular expression) pattern is a sequence of characters that define a search pattern for text. to extract the number next to \"Current:\"\n\npattern <- \"(?i)Current:\\\\s?(\\\\d{1,4}(\\\\.\\\\d{1,2})?)\"  \n# Explanation:\n# - (?i) -> Case insensitive search:\n# - Current: -> Matches \"Current:\"\n# - \\\\s? -> Matches optional whitespace after the word 'current'\n# - (\\\\d{1,4}(\\\\.\\\\d{1,2})?) -> Captures up to 4 digits (e.g., 12, 1234, or 12.34). Only using 4 digits as it is unlikely to see an average greater than xx.xx inches.\n\n# Extract the first match\n#combined_text → Contains all the extracted text from the PDF as a single string.\n#pattern → The regex pattern we created to find the precipitation value.\n#str_match() → Searches for the first occurrence that matches the pattern and extracts the specific value.\n\nmatch <- str_match(combined_text, pattern)\n\n# Check if a match was found\n#the if statement prevents the code from breaking in case there is no match for 'current precipitation' \nif (!is.na(match[2])) {\n  N_sierra_current_precip <- match[2]\n  cat(paste(N_sierra_current_precip, \"inches\\n\"))\n} else {\n  cat(\"No precipitation data found.\\n\")\n}\n\n\n```\n\nPercent of average rain for this date\n\n```{r}\n# Create an empty vector to store the extracted value\nN_sierra_average_precip <- c()\n\n# Extract text from the PDF file\n#northern_pdf_text <- pdf_text(northern_pdf_file)\n\n# Check if the PDF text is not empty\nif (length(northern_pdf_text) > 0) {\n  # Concatenate all the text into a single string\n  combined_text <- paste(northern_pdf_text, collapse = \" \")\n  \n  # Define the pattern to match the \"Percent of Average for this Date:\" followed by the percentage value\n  pattern <- \"(?i)Percent of Average for this Date:\\\\s*(\\\\d+%)\"\n  \n  # Extract the match using regmatches and regexpr\n  northern_next_four <- regmatches(combined_text, regexpr(pattern, combined_text, perl = TRUE))\n  \n  if (length(northern_next_four) > 0) {\n    # Extract the percentage value using a capturing group\n    percent_value <- sub(\"(?i)Percent of Average for this Date:\\\\s*(\\\\d+%)\", \"\\\\1\", northern_next_four)\n    \n    # Append the value to the vector\n    N_sierra_average_precip <- c(N_sierra_average_precip, percent_value)\n    \n    # Print only the percentage value\n    cat(percent_value, \"\\n\")\n  } else {\n    cat(\"Percent of Average for this Date not found.\\n\")\n  }\n} else {\n  cat(\"No text extracted from the PDF.\\n\")\n}\n\n\n\n```\n\n#### Central Sierra Region Current precipitation {style=\"color: darkblue\"}\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\n\n#Central Sierra precipitation #Pulling and downloading the pdf from online\n#URL of pdf file\n\n\n# URL of the PDF file\ncentral_ppt_pdf_url <- \"https://cdec.water.ca.gov/cgi-progs/products/PLOT_FSI.pdf\"\n\n# Read PDF text directly from the URL\ncentral_pdf_text <- pdf_text(central_ppt_pdf_url)\n\n# Print the extracted text (for debugging)\nprint(central_pdf_text)\n\n\n```\n\n```{r}\n# Create an empty vector\nCentral_current_precip <- c()\n\n# Adjusted pattern for \"Current:\"\nif (length(central_pdf_text) > 0) {\n  for (sentence in central_pdf_text) {\n    # Pattern to match \"Current:\" and capture the 4 characters after it\n    pattern <- \"(?i)Current[:\\\\s]+(.{4})\"\n    \n    # Extract the matched text\n    next_four <- regmatches(sentence, regexpr(pattern, sentence, perl = TRUE))\n    \n    if (length(next_four) > 0) {\n      # Extract only the captured group (the 4 characters) and not \"Current:\"\n      number_only <- sub(pattern, \"\\\\1\", next_four)\n      \n      # Append the value of number_only to the vector\n      Central_current_precip <- c(Central_current_precip, number_only)\n      \n      # Print only the number\n      cat(paste(number_only, \"inches\\n\"))\n    } else {\n      cat(\"Next four characters after 'Current:' not found.\\n\")\n    }\n  }\n} else {\n  cat(\"No text extracted from the PDF.\\n\")\n}\n\n\n```\n\nCentral Sierra Region: Percent of average rain for this date\n\n```{r}\n\n#Central Sierra #PUlling out Percent average\n\n#create an empty vector\nCentral_average_precip <- c()\n\n# Adjusted pattern for \"Percent of Average for this Date:\"\nif (length(central_pdf_text) > 0) {\n  for (sentence in central_pdf_text) {\n    pattern <- \"(?i)Percent of Average for this Date[:\\\\s]+(.{4})\"\n    next_four <- regmatches(sentence, regexpr(pattern, sentence, perl = TRUE))\n    if (length(next_four) > 0) {\n      # Append the value of next_four to the vector\n      Central_average_precip <- c(Central_average_precip, next_four)\n      cat(paste(next_four, \"\\n\"))\n    } else {\n      cat(\"Next four characters after 'Percent of Average for this Date:' not found.\\n\")\n    }\n  }\n} else {\n  cat(\"No text extracted from the PDF.\")\n}\n\n\n\n```\n\n#################################################################################### \n\n# Snow Pack\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\n#URL of pdf file\n\n# ***** need to see if this pdf updates everyday with the same URL *******\nsnow_pack_pdf_url <- \"https://cdec.water.ca.gov/cgi-progs/products/swccond.pdf\"\n\n\n#pathway to where you want the pdf to be saved\n#can eventaully make the name of the pdf with the date it is downloaded\nsnow_pack_pdf_file<-\"data_output/snow_pack.pdf\"\n\n# Download the PDF file\n\n# The \"wb\" mode is typically used when downloading non-text files, such as images, PDFs, or other binary files. It tells R to open the file in binary mode, which is necessary for correctly handling binary data\ndownload.file(snow_pack_pdf_url, snow_pack_pdf_file, mode = \"wb\")\n\n# Extract text from the PDF\nsnow_pack_pdf_text <- pdf_text(snow_pack_pdf_file)\n\n# Print the extracted text\nprint(snow_pack_pdf_text)\n\n\n```\n\n#### Northern Sierra\n\n```{r}\n# Define the pattern to match the line containing \"NORTH\" and the associated percentages\npattern <- \"(?i)NORTH\\\\s{2,}(\\\\d+%).*?(\\\\d+%)\"\n\n# Extract the \"NORTH\" section\nnorth_match <- regmatches(snow_pack_pdf_text, regexec(pattern, snow_pack_pdf_text, perl = TRUE))\n\n# Check if the \"NORTH\" section is found\nif (length(north_match) > 0) {\n  # Extract both percentages from the matched text\n  north_percentages <- regmatches(north_match[[1]], gregexpr(\"\\\\d+%\", north_match[[1]]))[[1]]\n  \n  # Print the extracted percentage\n  if (length(north_percentages) >= 2) {\n    cat(paste(\"Northern CA:\", north_percentages[2], \"of percent avgerage to date snow pack\"))\n  } else {\n    cat(\"Second percentage in the 'NORTH' section not found.\")\n  }\n} else {\n  cat(\"NORTH section not found.\")\n}\n\n```\n\n```{r}\n\n# Define the pattern to match the line containing the snow water equivalent information\npattern <- \"(?i)Average snow water equivalent \\\\(Inches\\\\)\\\\s+(\\\\d+\\\\.\\\\d+)\"\n\n# Extract the line containing snow water equivalent information\nsnow_water_line <- regmatches(snow_pack_pdf_text, regexpr(pattern, snow_pack_pdf_text, perl = TRUE))\n\n# Check if the line is found\nif (length(snow_water_line) > 0) {\n  # Extract the numeric value\n  numeric_value <- sub(\"(?i)Average snow water equivalent \\\\(Inches\\\\)\\\\s+(\\\\d+\\\\.\\\\d+)\", \"\\\\1\", snow_water_line)\n  \n  # Create the modified line with \"inches\" after the numeric value\n  modified_snow_water_line <- paste(\"average snow water equivalent\", numeric_value, \"inches\")\n  \n  cat(\"Northern Sierra\", modified_snow_water_line, \"\\n\")\n} else {\n  cat(\"Snow water equivalent information not found.\\n\")\n}\n\n\n```\n\n#### Central Sierra\n\n```{r}\n# Define the pattern to match the line containing \"NORTH\" and the associated percentages\npattern <- \"(?i)CENTRAL SIERRA\\\\s{2,}(\\\\d+%).*?(\\\\d+%)\"\n\n# Extract the \"CENTRAL SIERRA\" section\ncentral_match <- regmatches(snow_pack_pdf_text, regexec(pattern, snow_pack_pdf_text, perl = TRUE))\n\n# Check if the \"CENTRAL SIERRA\" section is found\nif (length(central_match) > 0) {\n  # Extract both percentages from the matched text\n  central_percentages <- regmatches(central_match[[1]], gregexpr(\"\\\\d+%\", central_match[[1]]))[[1]]\n  \n  # Print the extracted percentage\n  if (length(central_percentages) >= 2) {\n    cat(paste(\"CENTRAL SIERRA\", central_percentages[2], \"of percent avg. to date snow pack\"))\n  } else {\n    cat(\"Second percentage in the 'CENTRAL SIERRA' section not found.\")\n  }\n} else {\n  cat(\"CENTRAL SIERRA section not found.\")\n}\n\n\n```\n\n```{r}\n\n\n# Find the position of \"Central Sierra\" in the text\ncentral_sierra_position <- regexpr(\"(?i)Central Sierra\", snow_pack_pdf_text)\n\n# If \"Central Sierra\" is found, find the position of \"Average snow water equivalent (Inches)\" after it\nif (central_sierra_position > 0) {\n  # Get the substring starting from the position of \"Central Sierra\"\n  substring_after_central <- substring(snow_pack_pdf_text, central_sierra_position)\n  \n  # Find the position of \"Average snow water equivalent (Inches)\" within the substring\n  snow_water_position <- regexpr(\"(?i)Average snow water equivalent \\\\(Inches\\\\)\", substring_after_central)\n  \n  # If \"Average snow water equivalent (Inches)\" is found, extract the numeric value following it\n  if (snow_water_position > 0) {\n    # Get the substring starting from the position of \"Average snow water equivalent (Inches)\"\n    snow_water_substring <- substring(substring_after_central, snow_water_position)\n    \n    # Extract the numeric value following \"Average snow water equivalent (Inches)\"\n    snow_water_value <- regmatches(snow_water_substring, regexpr(\"\\\\d+\\\\.\\\\d+\", snow_water_substring))\n    \n    # If a numeric value is found, print it with the desired text\n    if (length(snow_water_value) > 0) {\n      cat(paste(\"Central snow water equivalent\", snow_water_value))\n    } else {\n      cat(\"Snow water equivalent value not found.\")\n    }\n  } else {\n    cat(\"Average snow water equivalent information not found for Central Sierra.\")\n  }\n} else {\n  cat(\"Central Sierra information not found.\")\n}\n\n\n```\n\n#### State-wide\n\n```{r}\n\n# Find the position of \"State\" in the text\nstate_position <- regexpr(\"(?i)State\", snow_pack_pdf_text)\n\n# If \"State\" is found, find the position of the numeric value after it\nif (state_position > 0) {\n  # Get the substring starting from the position of \"State\"\n  substring_after_state <- substring(snow_pack_pdf_text, state_position)\n  \n  # Extract the numeric value following \"State\"\n  snow_water_value <- regmatches(substring_after_state, regexpr(\"\\\\d+\\\\.\\\\d+\", substring_after_state))\n  \n  # If a numeric value is found, print it with the desired text\n  if (length(snow_water_value) > 0) {\n    cat(paste(\"State wide average snow pack\", snow_water_value))\n  } else {\n    cat(\"Snow water equivalent value not found.\")\n  }\n} else {\n  cat(\"State information not found.\")\n}\n\n\n```\n\n```{r}\n\n# Find the position of \"Statewide Average:\" in the text\nstatewide_position <- regexpr(\"(?i)Statewide Average:\", snow_pack_pdf_text)\n\n# If \"Statewide Average:\" is found, find the position of the numeric value after it\nif (statewide_position > 0) {\n  # Get the substring starting from the position of \"Statewide Average:\"\n  substring_after_statewide <- substring(snow_pack_pdf_text, statewide_position)\n  \n  # Extract both percentages from the matched text\n  statewide_percentages <- regmatches(substring_after_statewide, gregexpr(\"\\\\d+%\", substring_after_statewide))[[1]]\n  \n  # Print the second percentage with the desired text\n  if (length(statewide_percentages) >= 2) {\n    cat(\"Statewide average percent snow pack for this date\", statewide_percentages[2], \"\\n\")\n  } else {\n    cat(\"Second percentage after 'Statewide Average:' not found.\")\n  }\n} else {\n  cat(\"Statewide Average information not found.\\n\")\n}\n\n\n\n```\n\n# Reservoir Storage\n\n```{r}\nfile.exists(\"geo_files/legal_delta.geojson\")\n# Load the Legal Delta boundary (replace with your actual file path)\nlegal_delta_boundary <- geojson_read(\"geo_files/legal_delta.geojson\", what = \"sp\")\n\n# Create the map with Legal Delta boundary and specific points\nleaflet() %>%\n  addTiles() %>%\n  setView(lng = -121.5, lat = 38.05, zoom = 7) %>%  # Center the map\n\n  # Add the Legal Delta boundary polygon\n  addPolygons(data = legal_delta_boundary, color = \"blue\", weight = 2, fillOpacity = 0.5, popup = \"Legal Delta Boundary\") %>%\n  \n  # Add specific points of interest as markers\n  addMarkers(lng = -121.493000, lat = 39.540000, popup = \"Oroville Reservoir\") %>%  # Oroville reservoir (ORO)\n  addMarkers(lng = \t-119.302000, lat = \t37.145000, popup = \"Shasta Reservoir\") %>%    # Shasta reservoir (SHA)\n  addMarkers(lng = -121.133000, lat = 37.033000, popup = \"San Luis Reservoir\")   # San Luis reservoir (SNL)\n\n\n\n```\n\n##### shaded area on map is the legal delta\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\n\n# URL of the website to scrape\nreservoir_url <- \"https://cdec.water.ca.gov/reportapp/javareports?name=RES\"\n\n# Read the web page\nreservoir_web_page <- read_html(reservoir_url)\n\n# Extract the table node\nreservoir_table_node <- html_node(reservoir_web_page, \"table\")\n\n# Extract the table content into a data frame\nreservoir_table_data <- html_table(reservoir_table_node)\n\n# Print the entire table data\nprint(reservoir_table_data)\n\n```\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\n# Extract a specific numbers [row, column]\n# Shasta (at Sacramento River)\n\n# extract percent of average storage\nshasta_percent_average_storage_value <- as.numeric(reservoir_table_data[10, 9])\n\n# extract percent of capacity\nshasta_percent_capacity_value <- as.numeric(reservoir_table_data[10, 7])\n\n\n# Print the formatted output with a Markdown header\ncat(sprintf(\" Shasta Reservoir: %.0f%% of average storage, %.0f%% of total capacity.\\n\", \n    shasta_percent_average_storage_value, shasta_percent_capacity_value))\n\n\n```\n\n### Shasta Reservoir: `r shasta_percent_average_storage_value`% of average storage, `r shasta_percent_capacity_value`% of total capacity.\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\n# Extract a specific numbers [row, column]\n# Oroville (at Feather River)\n\n# extract percent of average storage\noroville_percent_average_storage_value <- as.numeric(reservoir_table_data[13, 9])\n\n# extract percent of capacity\noroville_percent_capacity_value <- as.numeric(reservoir_table_data[13, 7])\n\n# Print the formatted output (but this will be hidden)\ncat(sprintf(\" Oroville Reservoir: %.0f%% of average storage, %.0f%% of total capacity.\\n\", \n    oroville_percent_average_storage_value, oroville_percent_capacity_value))\n\n```\n\n### Oroville Reservoir: `r oroville_percent_average_storage_value`% of average storage, `r oroville_percent_capacity_value`% of total capacity.\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\n\n# Extract a specific numbers [row, column]\n# San Luis (at San Luis Creek)\n\n# extract percent of average storage\nSanLuis_percent_average_storage_value <- as.numeric(reservoir_table_data[56, 9])\n\n# extract percent of capacity\nSanLuis_percent_capacity_value <- as.numeric(reservoir_table_data[56, 7])\n\n# Print the formatted output (but this will be hidden)\ncat(sprintf(\" San Luis Reservoir: %.0f%% of average storage, %.0f%% of total capacity.\\n\", \n    SanLuis_percent_average_storage_value, SanLuis_percent_capacity_value))\n\n```\n\n### San Luis Reservoir: `r SanLuis_percent_average_storage_value`% of average storage, `r SanLuis_percent_capacity_value`% of total capacity.\n\n# Water Flow and Quality\n\n#### Location of flow sensors. Shaded region is legal delta\n\n```{r}\n#map of water flow sensors\n\n# Create the map with Legal Delta boundary and specific points\nleaflet() %>%\n  addTiles() %>%\n  setView(lng = -121.5, lat = 38.05, zoom = 8) %>%\n  \n  addPolygons(data = legal_delta_boundary, color = \"blue\", weight = 2, fillOpacity = 0.5, popup = \"Legal Delta Boundary\") %>%\n  \n  addMarkers(lng = -121.27, lat = 37.68, popup = \"San Joaquin River near Vernalis\") %>% # Add specific gps points\n  addMarkers(lng = -121.7, lat = 38.45, popup = \"Sacramento at Freeport\") %>%          # Add specific gps points\n  addMarkers(lng = -121.3, lat = 37.9, popup = \"Central Valley Project and State Water Project pumping station\")   # Center the map\n\n\n\n             \n\n\n```\n\n#### Sacramento River at Freeport\n\n```{r}\n\n\n# File path to your Excel file\nsacramento_file_path <- \"historical_data/historical_data_full.xlsx\"\n\n# Determine the current month and year\nsacramento_current_month <- format(Sys.Date(), \"%B\")\nsacramento_current_year <- format(Sys.Date(), \"%Y\")\n\n# Load the entire workbook without overwriting other sheets\nsacramento_workbook <- loadWorkbook(sacramento_file_path)\n\n# Read the specific sheet you want to update\nsacramento_historical_data <- readWorkbook(sacramento_workbook, sheet = \"Flow_Sac\")\nsacramento_historical_data$Year <- as.character(sacramento_historical_data$Year) # Ensure Year is character\n\n# Define the start and end dates for the current month\nsacramento_start_date <- floor_date(Sys.Date(), \"month\")\nsacramento_end_date <- Sys.Date()\n\n# Query CDEC data for Sacramento at Freeport (station \"FPT\") for the current month\nsacramento_flow_daily <- cdec_query(station = \"FPT\", sensor_num = 20, \n                                    dur_code = \"H\", start_date = as.character(sacramento_start_date), \n                                    end_date = as.character(sacramento_end_date))\n\n# Calculate the monthly average for Sacramento flow\nsacramento_export_monthly_average <- mean(sacramento_flow_daily$parameter_value, na.rm = TRUE)\n\n# Calculate the historical mean for the current month, if available in your data\nsacramento_current_month_historical_data <- sacramento_historical_data %>%\n  filter(Month == sacramento_current_month) %>%\n  select(Average_Flow_Daily)\n\nsacramento_current_month_historical_mean <- mean(sacramento_current_month_historical_data$Average_Flow_Daily, na.rm = TRUE)\n\n# Calculate the percentage of the current month’s average relative to the historical average\nsacramento_percentage_of_cfs_average <- (sacramento_export_monthly_average / sacramento_current_month_historical_mean) * 100\n\n# Print only the percentage result\nmessage(sprintf(\"Sacramento export monthly average is %.2f%% of the historical average for %s.\\nThe average CFS for %s %s is %.2f.\\n \", \n                sacramento_percentage_of_cfs_average, \n                sacramento_current_month,\n                sacramento_current_month,\n                sacramento_current_year,\n                sacramento_export_monthly_average))\n\n\n\n# Check if there is an entry for the current month and year\nexisting_entry <- sacramento_historical_data %>%\n  filter(Month == sacramento_current_month, Year == sacramento_current_year)\n\nsuppressMessages({\n  if (nrow(existing_entry) > 0) {\n    # Update the existing row with the new flow average for the current month\n    row_to_update <- which(sacramento_historical_data$Month == sacramento_current_month & \n                           sacramento_historical_data$Year == sacramento_current_year)\n    sacramento_historical_data[row_to_update, \"Average_Flow_Daily\"] <- sacramento_export_monthly_average\n  } else {\n    # Create a new row with the current month, year, and flow average if it's a new month\n    new_row <- data.frame(\n      Month = sacramento_current_month,\n      Year = sacramento_current_year,\n      Average_Flow_Daily = sacramento_export_monthly_average\n    )\n    \n    # Append the new row to the historical data\n    sacramento_historical_data <- bind_rows(sacramento_historical_data, new_row)\n  }\n  \n  # Write only the modified sheet back to the workbook\n  writeData(sacramento_workbook, sheet = \"Flow_Sac\", x = sacramento_historical_data)\n  \n  # Save the workbook, preserving all other sheets\n  saveWorkbook(sacramento_workbook, sacramento_file_path, overwrite = TRUE)\n})\n\n\n\n```\n\n```{r}\n\n#Sacramento River at Hood (station code SRH) #When run, will automatically update for current month\n\ncurrent_month <- format(Sys.Date(), \"%B\")\n\n# Get the first day of the current month\nstart_date <- floor_date(Sys.Date(), \"month\")\n\n# Get the current date\nend_date <- Sys.Date()\n\n# Query CDEC data from the first of the month to the current date\nsac_cond_daily_new <- cdec_query(station = \"SRH\", sensor_num = \"100\", \n                             dur_code = \"D\", start_date = as.character(start_date), \n                             end_date = as.character(end_date))\nSac_cond_monthly_average<-mean(sac_cond_daily_new$parameter_value, na.rm = T)\n\n\n#### ppm conversion\nsac_ppm<-(Sac_cond_monthly_average*0.55)\n\n\n\n#output\nmessage(sprintf(\"Average monthly salinity for %s is %.2f µS/cm and %.2f ppm\",\n                current_month, Sac_cond_monthly_average, sac_ppm))\n\n```\n\n#### San Joaquin River at Vernalis\n\n```{r}\n\n# File path to your Excel file (the one you just uploaded)\nsan_joaquin_file_path <- \"historical_data/historical_data_full.xlsx\"\n\n# Determine the current month and year\nsan_joaquin_current_month <- format(Sys.Date(), \"%B\")\nsan_joaquin_current_year <- format(Sys.Date(), \"%Y\")\n\n# Load the entire workbook without overwriting other sheets\nsan_joaquin_workbook <- loadWorkbook(san_joaquin_file_path)\n\n# Read the specific sheet you want to update\nsan_joaquin_historical_data <- readWorkbook(san_joaquin_workbook, sheet = \"Flow_SanJoaq\")\nsan_joaquin_historical_data$Year <- as.character(san_joaquin_historical_data$Year) # Ensure Year is character\n\n# Define the start and end dates for the current month\nsan_joaquin_start_date <- floor_date(Sys.Date(), \"month\")\nsan_joaquin_end_date <- Sys.Date()\n\n# Query CDEC data for San Joaquin at Vernalis (station \"VNS\") for the current month\n# Assuming `cdec_query` returns a data frame with a \"parameter_value\" column\nsan_joaquin_flow_daily <- cdec_query(station = \"VNS\", sensor_num = 20, \n                                     dur_code = \"H\", start_date = as.character(san_joaquin_start_date), \n                                     end_date = as.character(san_joaquin_end_date))\n\n# Calculate the monthly average for San Joaquin flow\nsan_joaquin_export_monthly_average <- mean(san_joaquin_flow_daily$parameter_value, na.rm = TRUE)\n\n# Calculate the historical mean for the current month, if available in your data\nsan_joaquin_current_month_historical_data <- san_joaquin_historical_data %>%\n  filter(Month == san_joaquin_current_month) %>%\n  select(Average_Flow_Daily)\n\nsan_joaquin_current_month_historical_mean <- mean(san_joaquin_current_month_historical_data$Average_Flow_Daily, na.rm = TRUE)\n\n# Calculate the percentage of the current month’s average relative to the historical average\nsan_joaquin_percentage_of_cfs_average <- (san_joaquin_export_monthly_average / san_joaquin_current_month_historical_mean) * 100\n\n# Print only the percentage result\nmessage(sprintf(\"San Joaquin export monthly average is %.2f%% of the historical average for %s.\\nThe average CFS for %s %s is %.2f.\\n\", \n                san_joaquin_percentage_of_cfs_average, \n                san_joaquin_current_month,\n                san_joaquin_current_month,\n                san_joaquin_current_year,\n                san_joaquin_export_monthly_average))\n\n\n\n\n# Check if there is an entry for the current month and year\nexisting_entry <- san_joaquin_historical_data %>%\n  filter(Month == san_joaquin_current_month, Year == san_joaquin_current_year)\n\nsuppressMessages({\n  if (nrow(existing_entry) > 0) {\n    # Update the existing row with the new flow average for the current month\n    row_to_update <- which(san_joaquin_historical_data$Month == san_joaquin_current_month & \n                           san_joaquin_historical_data$Year == san_joaquin_current_year)\n    san_joaquin_historical_data[row_to_update, \"Average_Flow_Daily\"] <- san_joaquin_export_monthly_average\n  } else {\n    # Create a new row with the current month, year, and flow average if it's a new month\n    new_row <- data.frame(\n      Month = san_joaquin_current_month,\n      Year = san_joaquin_current_year,\n      Average_Flow_Daily = san_joaquin_export_monthly_average\n    )\n    \n    # Append the new row to the historical data\n    san_joaquin_historical_data <- bind_rows(san_joaquin_historical_data, new_row)\n  }\n  \n  # Write only the modified sheet back to the workbook\n  writeData(san_joaquin_workbook, sheet = \"Flow_SanJoaq\", x = san_joaquin_historical_data)\n  \n  # Save the workbook, preserving all other sheets\n  saveWorkbook(san_joaquin_workbook, san_joaquin_file_path, overwrite = TRUE)\n})\n\n\n\n```\n\n```{r}\n\n#San Joaquin River at Vernalis (station code - VER) #When run, will automatically update for current month\n\n# Get the first day of the current month\nstart_date <- floor_date(Sys.Date(), \"month\")\n\n# Get the current date\nend_date <- Sys.Date()\n\n# Query CDEC data from the first of the month to the current date\nSanJoaquin_cond_daily_new <- cdec_query(station = \"VER\", sensor_num = \"100\", \n                             dur_code = \"D\", start_date = as.character(start_date), \n                             end_date = as.character(end_date))\n\n\nSanJoaquin_cond_monthly_average<-mean(SanJoaquin_cond_daily_new$parameter_value, na.rm = T)\n\n\n#### ppm conversion\nSanJoa_ppm<-(SanJoaquin_cond_monthly_average*0.55)\n\n\n#output\nmessage(sprintf(\"Average monthly salinity for  %s is %.2f µS/cm and %.2f ppm\",\n                current_month, SanJoaquin_cond_monthly_average, SanJoa_ppm))\n\n```\n\n#### Total Delta Exports: (Central Valley Project + State Water Project):\n\nThis is a monthly average of exports through: Clifton Court (CLT), Tracy (TRA), Contra Costa (CCC), and Byron Bethany (BBID)\n\n```{r}\n\n# URL of the PDF file\ndelta_exports_pdf_url <- \"https://www.usbr.gov/mp/cvo/vungvari/doutdly.pdf\"\n\n# Path to save the downloaded PDF file\ndelta_exports_pdf_file <- \"historical_data/delta_exports.pdf\"\n\n# Download the PDF file\ndownload.file(delta_exports_pdf_url, delta_exports_pdf_file, mode = \"wb\")\n\n# Extract text from the PDF file\ndelta_exports_pdf_text <- pdf_text(delta_exports_pdf_file)\n\n# Extract the last page's text\ndelta_export_last_page_text <- delta_exports_pdf_text[length(delta_exports_pdf_text)]\n\n# Split the text into lines\ndelta_export_lines <- str_split(delta_export_last_page_text, \"\\\\n\")[[1]]\n\n# Find the line containing the \"Average\" row\ndelta_export_average_line <- delta_export_lines[str_detect(delta_export_lines, \"Average\")]\n\n# Define delta_export_numbers before use\ndelta_export_numbers <- str_split(delta_export_average_line, \"\\\\s+\")[[1]]\n\n# Print extracted elements for debugging\n#print(delta_export_numbers)\n\n# Extract numeric values\nnumeric_values <- delta_export_numbers[str_detect(delta_export_numbers, \"^\\\\d{1,5}[,\\\\.]?\\\\d*$\")]\n\n# Print numeric values for debugging\n#print(numeric_values)\n\n# Extract the 17th numeric value\n\n#sometimes the number (length(numeric_values) >= 15) needs to be changed \n\nif (length(numeric_values) >= 15) {\n    average_delta_export_value <- as.numeric(gsub(\",\", \"\", numeric_values[15]))\n} else {\n    warning(\"Could not find the 14th numeric value. Check the PDF format.\")\n    average_delta_export_value <- NA\n}\n\n# Print the final extracted value\n#print(average_delta_export_value)\n\n# Excel file path and current date\ndelta_export_file_path <- \"historical_data/historical_data_full.xlsx\"\ncurrent_month <- format(Sys.Date(), \"%B\")\ncurrent_year <- format(Sys.Date(), \"%Y\")\n\n# Load workbook and sheet\ndelta_exports_workbook <- loadWorkbook(delta_export_file_path)\ndelta_exports_data <- readWorkbook(delta_exports_workbook, sheet = \"Total_Delta_Exports\")\n\ndelta_exports_data$Year <- as.character(delta_exports_data$Year)\n\n# Check for existing entry\nexisting_entry <- delta_exports_data %>%\n  filter(Month == current_month, Year == current_year)\n\nif (nrow(existing_entry) > 0) {\n  row_to_update <- which(delta_exports_data$Month == current_month &\n                         delta_exports_data$Year == current_year)\n  delta_exports_data[row_to_update, \"Exports\"] <- average_delta_export_value\n} else {\n  new_row <- data.frame(\n    Month = current_month,\n    Year = current_year,\n    Exports = average_delta_export_value\n  )\n  delta_exports_data <- bind_rows(delta_exports_data, new_row)\n}\n\n# Write updated sheet back to the workbook\nwriteData(delta_exports_workbook, sheet = \"Total_Delta_Exports\", x = delta_exports_data)\n\n# Save the workbook\nsaveWorkbook(delta_exports_workbook, delta_export_file_path, overwrite = TRUE)\n\n####################\n\n# Determine the current month and year\ndelta_export_current_month <- format(Sys.Date(), \"%B\")\ndelta_export_current_year <- format(Sys.Date(), \"%Y\")\n\n# Load the entire workbook without overwriting other sheets\ndelta_export_workbook <- loadWorkbook(delta_export_file_path)\n\n# Read the specific sheet you want to update\ndelta_export_historical_data <- readWorkbook(delta_export_workbook, sheet = \"Total_Delta_Exports\")\ndelta_export_historical_data$Year <- as.character(delta_export_historical_data$Year) # Ensure Year is character\n\n# Calculate the historical mean for the current month, if available in your data\ndelta_export_current_month_historical_data <- delta_export_historical_data %>%\n  filter(Month == delta_export_current_month) %>%\n  select(Exports)\n\n\ndelta_export_current_month_historical_mean <- mean(delta_export_current_month_historical_data$Exports, na.rm = TRUE)\n#delta_export_current_month_historical_mean\n\n\n# Calculate the percentage of the current month’s average relative to the historical average\ndelta_export_percentage_of_cfs_average <- (average_delta_export_value / delta_export_current_month_historical_mean) * 100\n#delta_export_percentage_of_cfs_average\n\n\n#.2f specifies 2 digits after the decimal place, and f stands for floating point number - meaning the decimal point will be placed whereever it is needed\n\nmessage(sprintf(\"Total Delta export (CVP + SWP) monthly average is %.2f%% of the historical average for %s.\\nThe average CFS for %s %s is %.2f.\\n\",\n                delta_export_percentage_of_cfs_average,\n                delta_export_current_month,\n                delta_export_current_month,\n                delta_export_current_year,\n                average_delta_export_value))\n\n\n```\n\n```{r}\n#Salinity at Banks pumping plant (station code - HBP) #When run, will automatically update for current month\n\n# Get the first day of the current month\nstart_date <- floor_date(Sys.Date(), \"month\")\n\n# Get the current date\nend_date <- Sys.Date()\n\n\n#### this sensor is not online at the moment\n# Query CDEC data from the first of the month to the current date\nBanks_cond_daily_new <- cdec_query(station = \"HBP\", sensor_num = \"100\", \n                             dur_code = \"D\", start_date = as.character(start_date), \n                             end_date = as.character(end_date))\n\n\n\n#need to take the average of all parameter_value for the date \nBanks_cond_monthly_average<-mean(Banks_cond_daily_new$parameter_value, na.rm = T)\n\n\n\n#convert um/cm to ppm\n#idea to have some historical context with the salinity?\n#### ppm conversion\nBanks_ppm<-(Banks_cond_monthly_average*0.55)\n\n\n\nmessage(sprintf(\"Average monthly salinity for combined CVP + SWP %s is %.2f µS/cm and %.2f ppm\",\n                current_month, Banks_cond_monthly_average, Banks_ppm))\n\n\n```\n\n# TEMPERATURE\n\n#need to add hisotrical average data in --\\> will add to csv file eventually\n\n```{r}\n\n#Water Temp - Sacramento river headwaters at Clear Creek\n\n# Get the first day of the current month\nstart_date <- floor_date(Sys.Date(), \"month\")\n\n# Get the current date\nend_date <- Sys.Date()\n\n# Query CDEC data from the first of the month to the current date\nSacClearCreek_waterTemp_new <- cdec_query(station = \"IGO\", sensor_num = \"25\", \n                             dur_code = \"H\", start_date = as.character(start_date), \n                             end_date = as.character(end_date))\n\n\n\n#need to take the average of all parameter_value for the date \nSacClearCreek_waterTemp_monthly_average<-mean(SacClearCreek_waterTemp_new$parameter_value, na.rm = T)\nSacClearCreek_waterTemp_monthly_average\n\n\n\n#cdec_datasets(\"IGO\")\n\n\n\n\n#### write river temp into workbook\n\n# Excel file path and current date\nClearCreek_file_path <- \"historical_data/historical_data_full.xlsx\"\ncurrent_month <- format(Sys.Date(), \"%B\")\ncurrent_year <- format(Sys.Date(), \"%Y\")\n\n# Load workbook and sheet\nClearCreek_workbook <- loadWorkbook(ClearCreek_file_path)\nClearCreek_data <- readWorkbook(ClearCreek_workbook, sheet = \"Temp_IGO\")\n\nClearCreek_data$Year <- as.character(ClearCreek_data$Year)\n\n# Check for existing entry\nexisting_entry <- ClearCreek_data %>%\n  filter(Month == current_month, Year == current_year)\n\nif (nrow(existing_entry) > 0) {\n  row_to_update <- which(ClearCreek_data$Month == current_month &\n                         ClearCreek_data$Year == current_year)\n  ClearCreek_data[row_to_update, \"Average_Temp_Monthly\"] <- SacClearCreek_waterTemp_monthly_average\n} else {\n  new_row <- data.frame(\n    Month = current_month,\n    Year = current_year,\n    Average_Temp_Monthly = SacClearCreek_waterTemp_monthly_average\n  )\n  ClearCreek_data <- bind_rows(ClearCreek_data, new_row)\n}\n\n# Write updated sheet back to the workbook\nwriteData(ClearCreek_workbook, sheet = \"Temp_IGO\", x = ClearCreek_data)\n\n# Save the workbook\nsaveWorkbook(ClearCreek_workbook, ClearCreek_file_path, overwrite = TRUE)\n\n##### make it print the monthly average for that month for a 20 year average (i think its actually 15 for these)\n######################\n\n# Determine the current month and year\nClearCreek_current_month <- format(Sys.Date(), \"%B\")\nClearCreek_current_year <- format(Sys.Date(), \"%Y\")\n\n# Load the entire workbook without overwriting other sheets\nClearCreek_workbook <- loadWorkbook(ClearCreek_file_path)\n\n# Read the specific sheet you want to update\nClearCreek_historical_data <- readWorkbook(ClearCreek_workbook, sheet = \"Temp_IGO\")\nClearCreek_historical_data$Year <- as.character(ClearCreek_historical_data$Year) # Ensure Year is character\n\n# Calculate the historical mean for the current month, if available in your data\nClearCreek_current_month_historical_data <- ClearCreek_historical_data %>%\n  filter(Month == ClearCreek_current_month) %>%\n  select(Average_Temp_Monthly)\n\n\nClearCreek_current_month_historical_mean <- mean(ClearCreek_current_month_historical_data$Average_Temp_Monthly, na.rm = TRUE)\n#delta_export_current_month_historical_mean\nClearCreek_current_month_historical_mean\n\n\n\nmessage(sprintf(\"Average monthly water temperature for Clear Creek in %s is %.2f °F\\nand the historical average for %s is %.2f °F\",\n                ClearCreek_current_month, SacClearCreek_waterTemp_monthly_average, \n                ClearCreek_current_month,\n                ClearCreek_current_month_historical_mean))\n\n\n```\n\n```{r}\n#Water Temp - Sacramento/San Joaquin Rivers confluence at Collinsville\n\n# Get the first day of the current month\nstart_date <- floor_date(Sys.Date(), \"month\")\n\n# Get the current date\nend_date <- Sys.Date()\n\n# Query CDEC data from the first of the month to the current date\nSacSanJoaquin_waterTemp_new <- cdec_query(station = \"CSE\", sensor_num = \"25\", \n                             dur_code = \"H\", start_date = as.character(start_date), \n                             end_date = as.character(end_date))\n\n\n\n#need to take the average of all parameter_value for the date \nSacSanJoaquin_waterTemp_monthly_average<-mean(SacSanJoaquin_waterTemp_new$parameter_value, na.rm = T)\nSacSanJoaquin_waterTemp_monthly_average\n\n\n```\n\n```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}\n\n#Water Temp - South Delta (near HBP) at Clifton Court Forebay\n\n\n#cdec_datasets(\"CLC\")\n\n# Get the first day of the current month\nstart_date <- floor_date(Sys.Date(), \"month\")\n\n# Get the current date\nend_date <- Sys.Date()\n\n# Query CDEC data from the first of the month to the current date\nSouthDelta_waterTemp_new <- cdec_query(station = \"CLC\", sensor_num = \"146\", \n                             dur_code = \"H\", start_date = as.character(start_date), \n                             end_date = as.character(end_date))\n\n\n\n#because CLC temp gage only have readings in Celcius, need to convert to F\n\nSouthDelta_waterTemp_new$parameter_F<-(SouthDelta_waterTemp_new$parameter_value*( 9/5) + 32)\n\n\n#need to take the average of all parameter_value for the date \nSouthDelta_waterTemp_monthly_average_F<-mean(SouthDelta_waterTemp_new$parameter_F, na.rm = T)\nSouthDelta_waterTemp_monthly_average_F\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.554","title":"Whats going on in the Delta Wateshed"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}